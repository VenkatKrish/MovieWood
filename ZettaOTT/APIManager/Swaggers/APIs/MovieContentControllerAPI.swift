//
// MovieContentControllerAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class MovieContentControllerAPI {
    /**
     deleteMovieContent
     
     - parameter movieContentId: (path) movieContentId 
     - parameter movieId: (path) movieId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteMovieContentUsingDELETE(movieContentId: Int64, movieId: Int64, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        deleteMovieContentUsingDELETEWithRequestBuilder(movieContentId: movieContentId, movieId: movieId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     deleteMovieContent
     - DELETE /api/v1/movie/{movieId}/moviecontent/{movieContentId}
     - examples: [{output=none}]
     
     - parameter movieContentId: (path) movieContentId 
     - parameter movieId: (path) movieId 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func deleteMovieContentUsingDELETEWithRequestBuilder(movieContentId: Int64, movieId: Int64) -> RequestBuilder<JSONValue> {
        var path = "/api/v1/movie/{movieId}/moviecontent/{movieContentId}"
        let movieContentIdPreEscape = "\(movieContentId)"
        let movieContentIdPostEscape = movieContentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{movieContentId}", with: movieContentIdPostEscape, options: .literal, range: nil)
        let movieIdPreEscape = "\(movieId)"
        let movieIdPostEscape = movieIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{movieId}", with: movieIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     movieContents
     
     - parameter movieContentId: (path) movieContentId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func movieContentsUsingGET(movieContentId: Int64, completion: @escaping ((_ data: MovieContent?,_ error: Error?) -> Void)) {
        movieContentsUsingGETWithRequestBuilder(movieContentId: movieContentId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     movieContents
     - GET /api/v1/moviecontent/{movieContentId}
     - examples: [{output=none}]
     
     - parameter movieContentId: (path) movieContentId 

     - returns: RequestBuilder<MovieContent> 
     */
    open class func movieContentsUsingGETWithRequestBuilder(movieContentId: Int64) -> RequestBuilder<MovieContent> {
        var path = "/api/v1/moviecontent/{movieContentId}"
        let movieContentIdPreEscape = "\(movieContentId)"
        let movieContentIdPostEscape = movieContentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{movieContentId}", with: movieContentIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MovieContent>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     movieGenresByMovie
     
     - parameter movieId: (path) movieId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func movieGenresByMovieUsingGET(movieId: Int64, completion: @escaping ((_ data: [MovieContent]?,_ error: Error?) -> Void)) {
        movieGenresByMovieUsingGETWithRequestBuilder(movieId: movieId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     movieGenresByMovie
     - GET /api/v1/moviecontentbymovie/{movieId}
     - examples: [{output=none}]
     
     - parameter movieId: (path) movieId 

     - returns: RequestBuilder<[MovieContent]> 
     */
    open class func movieGenresByMovieUsingGETWithRequestBuilder(movieId: Int64) -> RequestBuilder<[MovieContent]> {
        var path = "/api/v1/moviecontentbymovie/{movieId}"
        let movieIdPreEscape = "\(movieId)"
        let movieIdPostEscape = movieIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{movieId}", with: movieIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[MovieContent]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     saveMovieContent
     
     - parameter movieContent: (body) movieContent 
     - parameter movieId: (path) movieId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func saveMovieContentUsingPOST(movieContent: MovieContent, movieId: Int64, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        saveMovieContentUsingPOSTWithRequestBuilder(movieContent: movieContent, movieId: movieId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     saveMovieContent
     - POST /api/v1/movie/{movieId}/moviecontent
     - examples: [{output=none}]
     
     - parameter movieContent: (body) movieContent 
     - parameter movieId: (path) movieId 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func saveMovieContentUsingPOSTWithRequestBuilder(movieContent: MovieContent, movieId: Int64) -> RequestBuilder<JSONValue> {
        var path = "/api/v1/movie/{movieId}/moviecontent"
        let movieIdPreEscape = "\(movieId)"
        let movieIdPostEscape = movieIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{movieId}", with: movieIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: movieContent)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     updateMovieContent
     
     - parameter movieContent: (body) movieContent 
     - parameter movieContentId: (path) movieContentId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateMovieContentUsingPUT(movieContent: MovieContent, movieContentId: Int64, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        updateMovieContentUsingPUTWithRequestBuilder(movieContent: movieContent, movieContentId: movieContentId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     updateMovieContent
     - PUT /api/v1/moviecontent/{movieContentId}
     - examples: [{output=none}]
     
     - parameter movieContent: (body) movieContent 
     - parameter movieContentId: (path) movieContentId 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func updateMovieContentUsingPUTWithRequestBuilder(movieContent: MovieContent, movieContentId: Int64) -> RequestBuilder<JSONValue> {
        var path = "/api/v1/moviecontent/{movieContentId}"
        let movieContentIdPreEscape = "\(movieContentId)"
        let movieContentIdPostEscape = movieContentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{movieContentId}", with: movieContentIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: movieContent)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
