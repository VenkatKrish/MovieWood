//
// ChannelControllerAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class ChannelControllerAPI {
    /**
     all
     
     - parameter offset: (query)  (optional)
     - parameter pageNumber: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter paged: (query)  (optional)
     - parameter sortSorted: (query)  (optional)
     - parameter sortUnsorted: (query)  (optional)
     - parameter unpaged: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func allUsingGET2(offset: Int64? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, paged: Bool? = nil, sortSorted: Bool? = nil, sortUnsorted: Bool? = nil, unpaged: Bool? = nil, completion: @escaping ((_ data: PageChannels?,_ error: Error?) -> Void)) {
        allUsingGET2WithRequestBuilder(offset: offset, pageNumber: pageNumber, pageSize: pageSize, paged: paged, sortSorted: sortSorted, sortUnsorted: sortUnsorted, unpaged: unpaged).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     all
     - GET /api/v1/getallchannels
     - examples: [{output=none}]
     
     - parameter offset: (query)  (optional)
     - parameter pageNumber: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter paged: (query)  (optional)
     - parameter sortSorted: (query)  (optional)
     - parameter sortUnsorted: (query)  (optional)
     - parameter unpaged: (query)  (optional)

     - returns: RequestBuilder<PageChannels> 
     */
    open class func allUsingGET2WithRequestBuilder(offset: Int64? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, paged: Bool? = nil, sortSorted: Bool? = nil, sortUnsorted: Bool? = nil, unpaged: Bool? = nil) -> RequestBuilder<PageChannels> {
        let path = "/api/v1/getallchannels"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "offset": offset?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON(), 
            "paged": paged, 
            "sort.sorted": sortSorted, 
            "sort.unsorted": sortUnsorted, 
            "unpaged": unpaged
        ])

        let requestBuilder: RequestBuilder<PageChannels>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     deleteActor
     
     - parameter channelId: (path) channelId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteActorUsingDELETE1(channelId: Int64, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        deleteActorUsingDELETE1WithRequestBuilder(channelId: channelId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     deleteActor
     - DELETE /api/v1/channels/{channelId}
     - examples: [{output=none}]
     
     - parameter channelId: (path) channelId 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func deleteActorUsingDELETE1WithRequestBuilder(channelId: Int64) -> RequestBuilder<JSONValue> {
        var path = "/api/v1/channels/{channelId}"
        let channelIdPreEscape = "\(channelId)"
        let channelIdPostEscape = channelIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{channelId}", with: channelIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     getActor
     
     - parameter channelId: (path) channelId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getActorUsingGET1(channelId: Int64, completion: @escaping ((_ data: Channels?,_ error: Error?) -> Void)) {
        getActorUsingGET1WithRequestBuilder(channelId: channelId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     getActor
     - GET /api/v1/channels/{channelId}
     - examples: [{output=none}]
     
     - parameter channelId: (path) channelId 

     - returns: RequestBuilder<Channels> 
     */
    open class func getActorUsingGET1WithRequestBuilder(channelId: Int64) -> RequestBuilder<Channels> {
        var path = "/api/v1/channels/{channelId}"
        let channelIdPreEscape = "\(channelId)"
        let channelIdPostEscape = channelIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{channelId}", with: channelIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Channels>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     getChannel
     
     - parameter channelKey: (query) channelKey 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getChannelUsingGET(channelKey: String, completion: @escaping ((_ data: [Channels]?,_ error: Error?) -> Void)) {
        getChannelUsingGETWithRequestBuilder(channelKey: channelKey).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     getChannel
     - GET /api/v1/channels
     - examples: [{output=none}]
     
     - parameter channelKey: (query) channelKey 

     - returns: RequestBuilder<[Channels]> 
     */
    open class func getChannelUsingGETWithRequestBuilder(channelKey: String) -> RequestBuilder<[Channels]> {
        let path = "/api/v1/channels"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "channelKey": channelKey
        ])

        let requestBuilder: RequestBuilder<[Channels]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     getMyChannels
     
     - parameter offset: (query)  (optional)
     - parameter pageNumber: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter paged: (query)  (optional)
     - parameter sortSorted: (query)  (optional)
     - parameter sortUnsorted: (query)  (optional)
     - parameter unpaged: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMyChannelsUsingGET(offset: Int64? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, paged: Bool? = nil, sortSorted: Bool? = nil, sortUnsorted: Bool? = nil, unpaged: Bool? = nil, completion: @escaping ((_ data: PageChannels?,_ error: Error?) -> Void)) {
        getMyChannelsUsingGETWithRequestBuilder(offset: offset, pageNumber: pageNumber, pageSize: pageSize, paged: paged, sortSorted: sortSorted, sortUnsorted: sortUnsorted, unpaged: unpaged).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     getMyChannels
     - GET /api/v1/mychannels
     - examples: [{output=none}]
     
     - parameter offset: (query)  (optional)
     - parameter pageNumber: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter paged: (query)  (optional)
     - parameter sortSorted: (query)  (optional)
     - parameter sortUnsorted: (query)  (optional)
     - parameter unpaged: (query)  (optional)

     - returns: RequestBuilder<PageChannels> 
     */
    open class func getMyChannelsUsingGETWithRequestBuilder(offset: Int64? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, paged: Bool? = nil, sortSorted: Bool? = nil, sortUnsorted: Bool? = nil, unpaged: Bool? = nil) -> RequestBuilder<PageChannels> {
        let path = "/api/v1/mychannels"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "offset": offset?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON(), 
            "paged": paged, 
            "sort.sorted": sortSorted, 
            "sort.unsorted": sortUnsorted, 
            "unpaged": unpaged
        ])

        let requestBuilder: RequestBuilder<PageChannels>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     getbyChannelName
     
     - parameter channelName: (query) channelName 
     - parameter offset: (query)  (optional)
     - parameter pageNumber: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter paged: (query)  (optional)
     - parameter sortSorted: (query)  (optional)
     - parameter sortUnsorted: (query)  (optional)
     - parameter unpaged: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getbyChannelNameUsingGET(channelName: String, offset: Int64? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, paged: Bool? = nil, sortSorted: Bool? = nil, sortUnsorted: Bool? = nil, unpaged: Bool? = nil, completion: @escaping ((_ data: PageChannels?,_ error: Error?) -> Void)) {
        getbyChannelNameUsingGETWithRequestBuilder(channelName: channelName, offset: offset, pageNumber: pageNumber, pageSize: pageSize, paged: paged, sortSorted: sortSorted, sortUnsorted: sortUnsorted, unpaged: unpaged).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     getbyChannelName
     - GET /api/v1/channelsbyname
     - examples: [{output=none}]
     
     - parameter channelName: (query) channelName 
     - parameter offset: (query)  (optional)
     - parameter pageNumber: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter paged: (query)  (optional)
     - parameter sortSorted: (query)  (optional)
     - parameter sortUnsorted: (query)  (optional)
     - parameter unpaged: (query)  (optional)

     - returns: RequestBuilder<PageChannels> 
     */
    open class func getbyChannelNameUsingGETWithRequestBuilder(channelName: String, offset: Int64? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, paged: Bool? = nil, sortSorted: Bool? = nil, sortUnsorted: Bool? = nil, unpaged: Bool? = nil) -> RequestBuilder<PageChannels> {
        let path = "/api/v1/channelsbyname"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "channelName": channelName, 
            "offset": offset?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON(), 
            "paged": paged, 
            "sort.sorted": sortSorted, 
            "sort.unsorted": sortUnsorted, 
            "unpaged": unpaged
        ])

        let requestBuilder: RequestBuilder<PageChannels>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     saveChannel
     
     - parameter channel: (body) channel 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func saveChannelUsingPOST(channel: Channels, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        saveChannelUsingPOSTWithRequestBuilder(channel: channel).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     saveChannel
     - POST /api/v1/channels
     - examples: [{output=none}]
     
     - parameter channel: (body) channel 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func saveChannelUsingPOSTWithRequestBuilder(channel: Channels) -> RequestBuilder<JSONValue> {
        let path = "/api/v1/channels"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: channel)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     updateActor
     
     - parameter channel: (body) channel 
     - parameter channelId: (path) channelId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateActorUsingPUT1(channel: Channels, channelId: Int64, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        updateActorUsingPUT1WithRequestBuilder(channel: channel, channelId: channelId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     updateActor
     - PUT /api/v1/channels/{channelId}
     - examples: [{output=none}]
     
     - parameter channel: (body) channel 
     - parameter channelId: (path) channelId 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func updateActorUsingPUT1WithRequestBuilder(channel: Channels, channelId: Int64) -> RequestBuilder<JSONValue> {
        var path = "/api/v1/channels/{channelId}"
        let channelIdPreEscape = "\(channelId)"
        let channelIdPostEscape = channelIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{channelId}", with: channelIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: channel)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     uploadImage
     
     - parameter channelId: (path) channelId 
     - parameter file: (form) file 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func uploadImageUsingPOST1(channelId: Int64, file: URL, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        uploadImageUsingPOST1WithRequestBuilder(channelId: channelId, file: file).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     uploadImage
     - POST /api/v1/uploadchannelimage/{channelId}
     - examples: [{output=none}]
     
     - parameter channelId: (path) channelId 
     - parameter file: (form) file 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func uploadImageUsingPOST1WithRequestBuilder(channelId: Int64, file: URL) -> RequestBuilder<JSONValue> {
        var path = "/api/v1/uploadchannelimage/{channelId}"
        let channelIdPreEscape = "\(channelId)"
        let channelIdPostEscape = channelIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{channelId}", with: channelIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "file": file
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
