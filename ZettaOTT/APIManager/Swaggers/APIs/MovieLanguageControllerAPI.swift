//
// MovieLanguageControllerAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class MovieLanguageControllerAPI {
    /**
     all
     
     - parameter offset: (query)  (optional)
     - parameter pageNumber: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter paged: (query)  (optional)
     - parameter sortSorted: (query)  (optional)
     - parameter sortUnsorted: (query)  (optional)
     - parameter unpaged: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func allUsingGET14(offset: Int64? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, paged: Bool? = nil, sortSorted: Bool? = nil, sortUnsorted: Bool? = nil, unpaged: Bool? = nil, completion: @escaping ((_ data: PageMovieLanguages?,_ error: Error?) -> Void)) {
        allUsingGET14WithRequestBuilder(offset: offset, pageNumber: pageNumber, pageSize: pageSize, paged: paged, sortSorted: sortSorted, sortUnsorted: sortUnsorted, unpaged: unpaged).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     all
     - GET /api/v1/getallmovielanguages
     - examples: [{output=none}]
     
     - parameter offset: (query)  (optional)
     - parameter pageNumber: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter paged: (query)  (optional)
     - parameter sortSorted: (query)  (optional)
     - parameter sortUnsorted: (query)  (optional)
     - parameter unpaged: (query)  (optional)

     - returns: RequestBuilder<PageMovieLanguages> 
     */
    open class func allUsingGET14WithRequestBuilder(offset: Int64? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, paged: Bool? = nil, sortSorted: Bool? = nil, sortUnsorted: Bool? = nil, unpaged: Bool? = nil) -> RequestBuilder<PageMovieLanguages> {
        let path = "/api/v1/getallmovielanguages"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "offset": offset?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON(), 
            "paged": paged, 
            "sort.sorted": sortSorted, 
            "sort.unsorted": sortUnsorted, 
            "unpaged": unpaged
        ])

        let requestBuilder: RequestBuilder<PageMovieLanguages>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     deleteMovieLanguage
     
     - parameter movieId: (path) movieId 
     - parameter movieLanguageId: (path) movieLanguageId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteMovieLanguageUsingDELETE(movieId: Int64, movieLanguageId: Int64, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        deleteMovieLanguageUsingDELETEWithRequestBuilder(movieId: movieId, movieLanguageId: movieLanguageId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     deleteMovieLanguage
     - DELETE /api/v1/movie/{movieId}/movielanguages/{movieLanguageId}
     - examples: [{output=none}]
     
     - parameter movieId: (path) movieId 
     - parameter movieLanguageId: (path) movieLanguageId 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func deleteMovieLanguageUsingDELETEWithRequestBuilder(movieId: Int64, movieLanguageId: Int64) -> RequestBuilder<JSONValue> {
        var path = "/api/v1/movie/{movieId}/movielanguages/{movieLanguageId}"
        let movieIdPreEscape = "\(movieId)"
        let movieIdPostEscape = movieIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{movieId}", with: movieIdPostEscape, options: .literal, range: nil)
        let movieLanguageIdPreEscape = "\(movieLanguageId)"
        let movieLanguageIdPostEscape = movieLanguageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{movieLanguageId}", with: movieLanguageIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     movieLanguageById
     
     - parameter movieLanguageId: (path) movieLanguageId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func movieLanguageByIdUsingGET(movieLanguageId: Int64, completion: @escaping ((_ data: MovieLanguages?,_ error: Error?) -> Void)) {
        movieLanguageByIdUsingGETWithRequestBuilder(movieLanguageId: movieLanguageId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     movieLanguageById
     - GET /api/v1/movielanguages/id/{movieLanguageId}
     - examples: [{output=none}]
     
     - parameter movieLanguageId: (path) movieLanguageId 

     - returns: RequestBuilder<MovieLanguages> 
     */
    open class func movieLanguageByIdUsingGETWithRequestBuilder(movieLanguageId: Int64) -> RequestBuilder<MovieLanguages> {
        var path = "/api/v1/movielanguages/id/{movieLanguageId}"
        let movieLanguageIdPreEscape = "\(movieLanguageId)"
        let movieLanguageIdPostEscape = movieLanguageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{movieLanguageId}", with: movieLanguageIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MovieLanguages>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     movieLanguagesByMovie
     
     - parameter movieId: (path) movieId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func movieLanguagesByMovieUsingGET(movieId: Int64, completion: @escaping ((_ data: [MovieLanguages]?,_ error: Error?) -> Void)) {
        movieLanguagesByMovieUsingGETWithRequestBuilder(movieId: movieId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     movieLanguagesByMovie
     - GET /api/v1/movielanguages/{movieId}
     - examples: [{output=none}]
     
     - parameter movieId: (path) movieId 

     - returns: RequestBuilder<[MovieLanguages]> 
     */
    open class func movieLanguagesByMovieUsingGETWithRequestBuilder(movieId: Int64) -> RequestBuilder<[MovieLanguages]> {
        var path = "/api/v1/movielanguages/{movieId}"
        let movieIdPreEscape = "\(movieId)"
        let movieIdPostEscape = movieIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{movieId}", with: movieIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[MovieLanguages]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     saveMovieLanguage
     
     - parameter movieId: (path) movieId 
     - parameter movieLanguage: (body) movieLanguage 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func saveMovieLanguageUsingPOST(movieId: Int64, movieLanguage: MovieLanguages, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        saveMovieLanguageUsingPOSTWithRequestBuilder(movieId: movieId, movieLanguage: movieLanguage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     saveMovieLanguage
     - POST /api/v1/movie/{movieId}/movielanguages
     - examples: [{output=none}]
     
     - parameter movieId: (path) movieId 
     - parameter movieLanguage: (body) movieLanguage 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func saveMovieLanguageUsingPOSTWithRequestBuilder(movieId: Int64, movieLanguage: MovieLanguages) -> RequestBuilder<JSONValue> {
        var path = "/api/v1/movie/{movieId}/movielanguages"
        let movieIdPreEscape = "\(movieId)"
        let movieIdPostEscape = movieIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{movieId}", with: movieIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: movieLanguage)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     updateMovieLanguage
     
     - parameter movieLanguageId: (path) movieLanguageId 
     - parameter movielanguage: (body) movielanguage 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateMovieLanguageUsingPUT(movieLanguageId: Int64, movielanguage: MovieLanguages, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        updateMovieLanguageUsingPUTWithRequestBuilder(movieLanguageId: movieLanguageId, movielanguage: movielanguage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     updateMovieLanguage
     - PUT /api/v1/movielanguages/{movieLanguageId}
     - examples: [{output=none}]
     
     - parameter movieLanguageId: (path) movieLanguageId 
     - parameter movielanguage: (body) movielanguage 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func updateMovieLanguageUsingPUTWithRequestBuilder(movieLanguageId: Int64, movielanguage: MovieLanguages) -> RequestBuilder<JSONValue> {
        var path = "/api/v1/movielanguages/{movieLanguageId}"
        let movieLanguageIdPreEscape = "\(movieLanguageId)"
        let movieLanguageIdPostEscape = movieLanguageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{movieLanguageId}", with: movieLanguageIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: movielanguage)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
