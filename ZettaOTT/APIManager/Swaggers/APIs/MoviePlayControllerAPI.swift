//
// MoviePlayControllerAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class MoviePlayControllerAPI {
    /**
     all
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func allUsingGET15(completion: @escaping ((_ data: [MoviePlays]?,_ error: Error?) -> Void)) {
        allUsingGET15WithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     all
     - GET /api/v1/getallmovieplays
     - examples: [{output=none}]

     - returns: RequestBuilder<[MoviePlays]> 
     */
    open class func allUsingGET15WithRequestBuilder() -> RequestBuilder<[MoviePlays]> {
        let path = "/api/v1/getallmovieplays"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[MoviePlays]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     deleteMoviePlay
     
     - parameter movieId: (path) movieId 
     - parameter moviePlayId: (path) moviePlayId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteMoviePlayUsingDELETE(movieId: Int64, moviePlayId: Int64, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        deleteMoviePlayUsingDELETEWithRequestBuilder(movieId: movieId, moviePlayId: moviePlayId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     deleteMoviePlay
     - DELETE /api/v1/movie/{movieId}/movieplays/{moviePlayId}
     - examples: [{output=none}]
     
     - parameter movieId: (path) movieId 
     - parameter moviePlayId: (path) moviePlayId 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func deleteMoviePlayUsingDELETEWithRequestBuilder(movieId: Int64, moviePlayId: Int64) -> RequestBuilder<JSONValue> {
        var path = "/api/v1/movie/{movieId}/movieplays/{moviePlayId}"
        let movieIdPreEscape = "\(movieId)"
        let movieIdPostEscape = movieIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{movieId}", with: movieIdPostEscape, options: .literal, range: nil)
        let moviePlayIdPreEscape = "\(moviePlayId)"
        let moviePlayIdPostEscape = moviePlayIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{moviePlayId}", with: moviePlayIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     moviePlaysByMovie
     
     - parameter movieId: (path) movieId 
     - parameter offset: (query)  (optional)
     - parameter pageNumber: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter paged: (query)  (optional)
     - parameter sortSorted: (query)  (optional)
     - parameter sortUnsorted: (query)  (optional)
     - parameter unpaged: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func moviePlaysByMovieUsingGET(movieId: Int64, offset: Int64? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, paged: Bool? = nil, sortSorted: Bool? = nil, sortUnsorted: Bool? = nil, unpaged: Bool? = nil, completion: @escaping ((_ data: PageMoviePlays?,_ error: Error?) -> Void)) {
        moviePlaysByMovieUsingGETWithRequestBuilder(movieId: movieId, offset: offset, pageNumber: pageNumber, pageSize: pageSize, paged: paged, sortSorted: sortSorted, sortUnsorted: sortUnsorted, unpaged: unpaged).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     moviePlaysByMovie
     - GET /api/v1/myplays/{movieId}
     - examples: [{output=none}]
     
     - parameter movieId: (path) movieId 
     - parameter offset: (query)  (optional)
     - parameter pageNumber: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter paged: (query)  (optional)
     - parameter sortSorted: (query)  (optional)
     - parameter sortUnsorted: (query)  (optional)
     - parameter unpaged: (query)  (optional)

     - returns: RequestBuilder<PageMoviePlays> 
     */
    open class func moviePlaysByMovieUsingGETWithRequestBuilder(movieId: Int64, offset: Int64? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, paged: Bool? = nil, sortSorted: Bool? = nil, sortUnsorted: Bool? = nil, unpaged: Bool? = nil) -> RequestBuilder<PageMoviePlays> {
        var path = "/api/v1/myplays/{movieId}"
        let movieIdPreEscape = "\(movieId)"
        let movieIdPostEscape = movieIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{movieId}", with: movieIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "offset": offset?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON(), 
            "paged": paged, 
            "sort.sorted": sortSorted, 
            "sort.unsorted": sortUnsorted, 
            "unpaged": unpaged
        ])

        let requestBuilder: RequestBuilder<PageMoviePlays>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     moviePlaysByUser
     
     - parameter offset: (query)  (optional)
     - parameter pageNumber: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter paged: (query)  (optional)
     - parameter sortSorted: (query)  (optional)
     - parameter sortUnsorted: (query)  (optional)
     - parameter unpaged: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func moviePlaysByUserUsingGET(offset: Int64? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, paged: Bool? = nil, sortSorted: Bool? = nil, sortUnsorted: Bool? = nil, unpaged: Bool? = nil, completion: @escaping ((_ data: PageMoviePlays?,_ error: Error?) -> Void)) {
        moviePlaysByUserUsingGETWithRequestBuilder(offset: offset, pageNumber: pageNumber, pageSize: pageSize, paged: paged, sortSorted: sortSorted, sortUnsorted: sortUnsorted, unpaged: unpaged).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     moviePlaysByUser
     - GET /api/v1/myplays
     - examples: [{output=none}]
     
     - parameter offset: (query)  (optional)
     - parameter pageNumber: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter paged: (query)  (optional)
     - parameter sortSorted: (query)  (optional)
     - parameter sortUnsorted: (query)  (optional)
     - parameter unpaged: (query)  (optional)

     - returns: RequestBuilder<PageMoviePlays> 
     */
    open class func moviePlaysByUserUsingGETWithRequestBuilder(offset: Int64? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, paged: Bool? = nil, sortSorted: Bool? = nil, sortUnsorted: Bool? = nil, unpaged: Bool? = nil) -> RequestBuilder<PageMoviePlays> {
        let path = "/api/v1/myplays"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "offset": offset?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON(), 
            "paged": paged, 
            "sort.sorted": sortSorted, 
            "sort.unsorted": sortUnsorted, 
            "unpaged": unpaged
        ])

        let requestBuilder: RequestBuilder<PageMoviePlays>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     saveMoviePlay
     
     - parameter movieId: (path) movieId 
     - parameter moviePlay: (body) moviePlay 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func saveMoviePlayUsingPOST(movieId: Int64, moviePlay: MoviePlays, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        saveMoviePlayUsingPOSTWithRequestBuilder(movieId: movieId, moviePlay: moviePlay).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     saveMoviePlay
     - POST /api/v1/movie/{movieId}/movieplays
     - examples: [{output=none}]
     
     - parameter movieId: (path) movieId 
     - parameter moviePlay: (body) moviePlay 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func saveMoviePlayUsingPOSTWithRequestBuilder(movieId: Int64, moviePlay: MoviePlays) -> RequestBuilder<JSONValue> {
        var path = "/api/v1/movie/{movieId}/movieplays"
        let movieIdPreEscape = "\(movieId)"
        let movieIdPostEscape = movieIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{movieId}", with: movieIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: moviePlay)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     updateMovieGenre
     
     - parameter moviePlay: (body) moviePlay 
     - parameter moviePlayId: (path) moviePlayId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateMovieGenreUsingPUT1(moviePlay: MoviePlays, moviePlayId: Int64, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        updateMovieGenreUsingPUT1WithRequestBuilder(moviePlay: moviePlay, moviePlayId: moviePlayId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     updateMovieGenre
     - PUT /api/v1/movieplays/{moviePlayId}
     - examples: [{output=none}]
     
     - parameter moviePlay: (body) moviePlay 
     - parameter moviePlayId: (path) moviePlayId 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func updateMovieGenreUsingPUT1WithRequestBuilder(moviePlay: MoviePlays, moviePlayId: Int64) -> RequestBuilder<JSONValue> {
        var path = "/api/v1/movieplays/{moviePlayId}"
        let moviePlayIdPreEscape = "\(moviePlayId)"
        let moviePlayIdPostEscape = moviePlayIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{moviePlayId}", with: moviePlayIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: moviePlay)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     playsByMovieId
     
     - parameter movieId: (path) movieId
     - parameter offset: (query)  (optional)
     - parameter pageNumber: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter paged: (query)  (optional)
     - parameter sortSorted: (query)  (optional)
     - parameter sortUnsorted: (query)  (optional)
     - parameter unpaged: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func playsByMovieIdUsingGET(movieId: Int64, offset: Int64? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, paged: Bool? = nil, sortSorted: Bool? = nil, sortUnsorted: Bool? = nil, unpaged: Bool? = nil, sort: String? = nil, completion: @escaping ((_ data: PageMoviePlays?,_ error: Error?) -> Void)) {
        playsByMovieIdUsingGETWithRequestBuilder(movieId: movieId, offset: offset, pageNumber: pageNumber, pageSize: pageSize, paged: paged, sortSorted: sortSorted, sortUnsorted: sortUnsorted, unpaged: unpaged, sort:sort).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     playsByMovieId
     - GET /api/v1/plays/{movieId}
     - examples: [{output=none}]
     
     - parameter movieId: (path) movieId
     - parameter offset: (query)  (optional)
     - parameter pageNumber: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter paged: (query)  (optional)
     - parameter sortSorted: (query)  (optional)
     - parameter sortUnsorted: (query)  (optional)
     - parameter unpaged: (query)  (optional)

     - returns: RequestBuilder<PageMoviePlays>
     */
    open class func playsByMovieIdUsingGETWithRequestBuilder(movieId: Int64, offset: Int64? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, paged: Bool? = nil, sortSorted: Bool? = nil, sortUnsorted: Bool? = nil, unpaged: Bool? = nil, sort: String? = nil) -> RequestBuilder<PageMoviePlays> {
        var path = "/api/v1/plays/{movieId}"
        let movieIdPreEscape = "\(movieId)"
        let movieIdPostEscape = movieIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{movieId}", with: movieIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "offset": offset?.encodeToJSON(),
            "pageNumber": pageNumber?.encodeToJSON(),
            "pageSize": pageSize?.encodeToJSON(),
            "paged": paged,
            "sort.sorted": sortSorted,
            "sort.unsorted": sortUnsorted,
            "unpaged": unpaged,
            "sort" : sort
        ])

        let requestBuilder: RequestBuilder<PageMoviePlays>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
