//
// UserControllerAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class UserControllerAPI {
    /**
     all
     
     - parameter offset: (query)  (optional)
     - parameter pageNumber: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter paged: (query)  (optional)
     - parameter sortSorted: (query)  (optional)
     - parameter sortUnsorted: (query)  (optional)
     - parameter unpaged: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func allUsingGET1(offset: Int64? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, paged: Bool? = nil, sortSorted: Bool? = nil, sortUnsorted: Bool? = nil, unpaged: Bool? = nil, completion: @escaping ((_ data: PageUsers?,_ error: Error?) -> Void)) {
        allUsingGET1WithRequestBuilder(offset: offset, pageNumber: pageNumber, pageSize: pageSize, paged: paged, sortSorted: sortSorted, sortUnsorted: sortUnsorted, unpaged: unpaged).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     all
     - GET /api/v1/getallusers
     - examples: [{output=none}]
     
     - parameter offset: (query)  (optional)
     - parameter pageNumber: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter paged: (query)  (optional)
     - parameter sortSorted: (query)  (optional)
     - parameter sortUnsorted: (query)  (optional)
     - parameter unpaged: (query)  (optional)

     - returns: RequestBuilder<PageUsers> 
     */
    open class func allUsingGET1WithRequestBuilder(offset: Int64? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, paged: Bool? = nil, sortSorted: Bool? = nil, sortUnsorted: Bool? = nil, unpaged: Bool? = nil) -> RequestBuilder<PageUsers> {
        let path = "/api/v1/getallusers"
        let URLString = SwaggerClientAPI.basePathAuth + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "offset": offset?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON(), 
            "paged": paged, 
            "sort.sorted": sortSorted, 
            "sort.unsorted": sortUnsorted, 
            "unpaged": unpaged
        ])

        let requestBuilder: RequestBuilder<PageUsers>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     authenticateEmailUser
     
     - parameter loginRequest: (body) loginRequest 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authenticateEmailUserUsingPOST(loginRequest: LoginRequest, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        authenticateEmailUserUsingPOSTWithRequestBuilder(loginRequest: loginRequest).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     authenticateEmailUser
     - POST /api/v1/users/emailLogin
     - examples: [{output=none}]
     
     - parameter loginRequest: (body) loginRequest 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func authenticateEmailUserUsingPOSTWithRequestBuilder(loginRequest: LoginRequest) -> RequestBuilder<JSONValue> {
        let path = "/api/v1/users/emailLogin"
        let URLString = SwaggerClientAPI.basePathAuth + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: loginRequest)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     authenticateSocialUser
     
     - parameter loginRequest: (body) loginRequest 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authenticateSocialUserUsingPOST(loginRequest: LoginRequest, completion: @escaping ((_ data: LoginSuccessModel?,_ error: Error?) -> Void)) {
        authenticateSocialUserUsingPOSTWithRequestBuilder(loginRequest: loginRequest).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     authenticateSocialUser
     - POST /api/v1/users/socialLogin
     - examples: [{output=none}]
     
     - parameter loginRequest: (body) loginRequest 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func authenticateSocialUserUsingPOSTWithRequestBuilder(loginRequest: LoginRequest) -> RequestBuilder<LoginSuccessModel> {
        let path = "/api/v1/users/socialLogin"
        let URLString = SwaggerClientAPI.basePathAuth + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: loginRequest)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LoginSuccessModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     authenticateToken
     
     - parameter tokenRequest: (body) tokenRequest 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authenticateTokenUsingPOST(tokenRequest: TokenRequest, completion: @escaping ((_ data: LoginSuccessModel?,_ error: Error?) -> Void)) {
        authenticateTokenUsingPOSTWithRequestBuilder(tokenRequest: tokenRequest).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     authenticateToken
     - POST /api/v1/users/generatetoken
     - examples: [{output=none}]
     
     - parameter tokenRequest: (body) tokenRequest 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func authenticateTokenUsingPOSTWithRequestBuilder(tokenRequest: TokenRequest) -> RequestBuilder<LoginSuccessModel> {
        let path = "/api/v1/users/generatetoken"
        let URLString = SwaggerClientAPI.basePathAuth + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tokenRequest)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LoginSuccessModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     authenticateUser
     
     - parameter loginRequest: (body) loginRequest 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authenticateUserUsingPOST(loginRequest: LoginRequest, completion: @escaping ((_ data: LoginSuccessModel?,_ error: Error?) -> Void)) {
        authenticateUserUsingPOSTWithRequestBuilder(loginRequest: loginRequest).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     authenticateUser
     - POST /api/v1/users/login
     - examples: [{output=none}]
     
     - parameter loginRequest: (body) loginRequest 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func authenticateUserUsingPOSTWithRequestBuilder(loginRequest: LoginRequest) -> RequestBuilder<LoginSuccessModel> {
        let path = "/api/v1/users/login"
        let URLString = SwaggerClientAPI.basePathAuth + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: loginRequest)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LoginSuccessModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     deleteUser
     
     - parameter userId: (path) userId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteUserUsingDELETE(userId: Int64, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        deleteUserUsingDELETEWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     deleteUser
     - DELETE /api/v1/user/{userId}
     - examples: [{output=none}]
     
     - parameter userId: (path) userId 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func deleteUserUsingDELETEWithRequestBuilder(userId: Int64) -> RequestBuilder<JSONValue> {
        var path = "/api/v1/user/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePathAuth + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     forgotPasswordByPhone
     
     - parameter phoneRequest: (body) phoneRequest 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func forgotPasswordByPhoneUsingPOST(phoneRequest: PhoneRequest, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        forgotPasswordByPhoneUsingPOSTWithRequestBuilder(phoneRequest: phoneRequest).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     forgotPasswordByPhone
     - POST /api/v1/users/forgotpasswordbyphone
     - examples: [{output=none}]
     
     - parameter phoneRequest: (body) phoneRequest 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func forgotPasswordByPhoneUsingPOSTWithRequestBuilder(phoneRequest: PhoneRequest) -> RequestBuilder<JSONValue> {
        let path = "/api/v1/users/forgotpasswordbyphone"
        let URLString = SwaggerClientAPI.basePathAuth + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: phoneRequest)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     forgotPassword
     
     - parameter emailRequest: (body) emailRequest 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func forgotPasswordUsingPOST(emailRequest: EmailRequest, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        forgotPasswordUsingPOSTWithRequestBuilder(emailRequest: emailRequest).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     forgotPassword
     - POST /api/v1/users/forgotpassword
     - examples: [{output=none}]
     
     - parameter emailRequest: (body) emailRequest 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func forgotPasswordUsingPOSTWithRequestBuilder(emailRequest: EmailRequest) -> RequestBuilder<JSONValue> {
        let path = "/api/v1/users/forgotpassword"
        let URLString = SwaggerClientAPI.basePathAuth + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: emailRequest)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     getMyProfile
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMyProfileUsingGET(completion: @escaping ((_ data: AppUserModel?,_ error: Error?) -> Void)) {
        getMyProfileUsingGETWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     getMyProfile
     - GET /api/v1/myprofile
     - examples: [{output=none}]

     - returns: RequestBuilder<JSONValue> 
     */
    open class func getMyProfileUsingGETWithRequestBuilder() -> RequestBuilder<AppUserModel> {
        let path = "/api/v1/myprofile"
        let URLString = SwaggerClientAPI.basePathAuth + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AppUserModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     getUser
     
     - parameter userId: (path) userId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserUsingGET(userId: Int64, completion: @escaping ((_ data: Users?,_ error: Error?) -> Void)) {
        getUserUsingGETWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     getUser
     - GET /api/v1/users/{userId}
     - examples: [{output=none}]
     
     - parameter userId: (path) userId 

     - returns: RequestBuilder<Users> 
     */
    open class func getUserUsingGETWithRequestBuilder(userId: Int64) -> RequestBuilder<Users> {
        var path = "/api/v1/users/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePathAuth + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Users>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     registerUserByEmail
     
     - parameter user: (body) user 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func registerUserByEmailUsingPOST(user: RegisterByEmail, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        registerUserByEmailUsingPOSTWithRequestBuilder(user: user).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     registerUserByEmail
     - POST /api/v1/users/registerbyemail
     - examples: [{output=none}]
     
     - parameter user: (body) user 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func registerUserByEmailUsingPOSTWithRequestBuilder(user: RegisterByEmail) -> RequestBuilder<JSONValue> {
        let path = "/api/v1/users/registerbyemail"
        let URLString = SwaggerClientAPI.basePathAuth + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: user)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     registerUserByPhone
     
     - parameter user: (body) user 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func registerUserByPhoneUsingPOST(user: RegisterByPhone, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        registerUserByPhoneUsingPOSTWithRequestBuilder(user: user).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     registerUserByPhone
     - POST /api/v1/users/registerbyphone
     - examples: [{output=none}]
     
     - parameter user: (body) user 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func registerUserByPhoneUsingPOSTWithRequestBuilder(user: RegisterByPhone) -> RequestBuilder<JSONValue> {
        let path = "/api/v1/users/registerbyphone"
        let URLString = SwaggerClientAPI.basePathAuth + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: user)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     registerUser
     
     - parameter user: (body) user 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func registerUserUsingPOST(user: Users, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        registerUserUsingPOSTWithRequestBuilder(user: user).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     registerUser
     - POST /api/v1/users/register
     - examples: [{output=none}]
     
     - parameter user: (body) user 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func registerUserUsingPOSTWithRequestBuilder(user: Users) -> RequestBuilder<JSONValue> {
        let path = "/api/v1/users/register"
        let URLString = SwaggerClientAPI.basePathAuth + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: user)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     resetPassword
     
     - parameter passwordChangeRequest: (body) passwordChangeRequest 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func resetPasswordUsingPOST(passwordChangeRequest: PasswordChangeRequest, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        resetPasswordUsingPOSTWithRequestBuilder(passwordChangeRequest: passwordChangeRequest).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     resetPassword
     - POST /api/v1/resetpassword
     - examples: [{output=none}]
     
     - parameter passwordChangeRequest: (body) passwordChangeRequest 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func resetPasswordUsingPOSTWithRequestBuilder(passwordChangeRequest: PasswordChangeRequest) -> RequestBuilder<JSONValue> {
        let path = "/api/v1/resetpassword"
        let URLString = SwaggerClientAPI.basePathAuth + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: passwordChangeRequest)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     search
     
     - parameter search: (query) search 
     - parameter page: (query) page (optional, default to 0)
     - parameter size: (query) size (optional, default to 50)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func searchUsingGET(search: String, page: Int? = nil, size: Int? = nil, completion: @escaping ((_ data: ResponseEntity?,_ error: Error?) -> Void)) {
        searchUsingGETWithRequestBuilder(search: search, page: page, size: size).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     search
     - GET /api/v1/searchusers
     - examples: [{output=none}]
     
     - parameter search: (query) search 
     - parameter page: (query) page (optional, default to 0)
     - parameter size: (query) size (optional, default to 50)

     - returns: RequestBuilder<ResponseEntity> 
     */
    open class func searchUsingGETWithRequestBuilder(search: String, page: Int? = nil, size: Int? = nil) -> RequestBuilder<ResponseEntity> {
        let path = "/api/v1/searchusers"
        let URLString = SwaggerClientAPI.basePathAuth + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": page?.encodeToJSON(), 
            "search": search, 
            "size": size?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ResponseEntity>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     updateFirstLOgin
     
     - parameter userDetailUpdate: (body) userDetailUpdate 
     - parameter userId: (path) userId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateFirstLOginUsingPOST(userDetailUpdate: UserDetailUpdate, userId: Int64, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        updateFirstLOginUsingPOSTWithRequestBuilder(userDetailUpdate: userDetailUpdate, userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     updateFirstLOgin
     - POST /api/v1/updatefirstlogin/{userId}
     - examples: [{output=none}]
     
     - parameter userDetailUpdate: (body) userDetailUpdate 
     - parameter userId: (path) userId 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func updateFirstLOginUsingPOSTWithRequestBuilder(userDetailUpdate: UserDetailUpdate, userId: Int64) -> RequestBuilder<JSONValue> {
        var path = "/api/v1/updatefirstlogin/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePathAuth + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userDetailUpdate)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     updateUser
     
     - parameter user: (body) user 
     - parameter userId: (path) userId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateUserUsingPUT(user: UpdateUser, userId: Int64, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        updateUserUsingPUTWithRequestBuilder(user: user, userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     updateUser
     - PUT /api/v1/userinfo/{userId}
     - examples: [{output=none}]
     
     - parameter user: (body) user 
     - parameter userId: (path) userId 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func updateUserUsingPUTWithRequestBuilder(user: UpdateUser, userId: Int64) -> RequestBuilder<JSONValue> {
        var path = "/api/v1/userinfo/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePathAuth + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: user)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     uploadImage
     
     - parameter file: (form) file 
     - parameter userId: (path) userId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func uploadImageUsingPOST(file: Data, userId: Int64, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        uploadImageUsingPOSTWithRequestBuilder(file: file, userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     uploadImage
     - POST /api/v1/uploadprofileimage/{userId}
     - examples: [{output=none}]
     
     - parameter file: (form) file 
     - parameter userId: (path) userId 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func uploadImageUsingPOSTWithRequestBuilder(file: Data, userId: Int64) -> RequestBuilder<JSONValue> {
        var path = "/api/v1/uploadprofileimage/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePathAuth + path
        let formParams: [String:Any?] = [
            "file": file
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     validatePhoneOTP
     
     - parameter login: (body) login 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func validatePhoneOTPUsingPOST(login: ValidateOTPRequest, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        validatePhoneOTPUsingPOSTWithRequestBuilder(login: login).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     validatePhoneOTP
     - POST /api/v1/users/validatephoneotp
     - examples: [{contentType=application/json, example={
  "bytes": [
    123,
    125
  ],
  "empty": false
}}]
     
     - parameter login: (body) login 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func validatePhoneOTPUsingPOSTWithRequestBuilder(login: ValidateOTPRequest) -> RequestBuilder<JSONValue> {
        let path = "/api/v1/users/validatephoneotp"
        let URLString = SwaggerClientAPI.basePathAuth + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: login)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     loginOrRegisterUser
     
     - parameter loginRequest: (body) loginRequest
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func loginOrRegisterUserUsingPOST(loginRequest: LoginOrRegisterRequest, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        loginOrRegisterUserUsingPOSTWithRequestBuilder(loginRequest: loginRequest).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     loginOrRegisterUser
     - POST /api/v1/users/loginOrRegisterUser
     - examples: [{output=none}]
     
     - parameter loginRequest: (body) loginRequest

     - returns: RequestBuilder<JSONValue>
     */
    open class func loginOrRegisterUserUsingPOSTWithRequestBuilder(loginRequest: LoginOrRegisterRequest) -> RequestBuilder<JSONValue> {
        let path = "/api/v1/users/loginOrRegisterUser"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: loginRequest)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
