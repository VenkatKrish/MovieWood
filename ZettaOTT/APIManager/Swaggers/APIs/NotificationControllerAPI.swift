//
// NotificationControllerAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class NotificationControllerAPI {
    /**
     all
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func allUsingGET20(completion: @escaping ((_ data: [Notifications]?,_ error: Error?) -> Void)) {
        allUsingGET20WithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     all
     - GET /api/v1/getallnotifications
     - examples: [{output=none}]

     - returns: RequestBuilder<[Notifications]> 
     */
    open class func allUsingGET20WithRequestBuilder() -> RequestBuilder<[Notifications]> {
        let path = "/api/v1/getallnotifications"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Notifications]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     deleteNotification
     
     - parameter notificationId: (path) notificationId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteNotificationUsingDELETE(notificationId: Int64, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        deleteNotificationUsingDELETEWithRequestBuilder(notificationId: notificationId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     deleteNotification
     - DELETE /api/v1/notifications/{notificationId}
     - examples: [{output=none}]
     
     - parameter notificationId: (path) notificationId 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func deleteNotificationUsingDELETEWithRequestBuilder(notificationId: Int64) -> RequestBuilder<JSONValue> {
        var path = "/api/v1/notifications/{notificationId}"
        let notificationIdPreEscape = "\(notificationId)"
        let notificationIdPostEscape = notificationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{notificationId}", with: notificationIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     saveNotification
     
     - parameter notifications: (body) notifications 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func saveNotificationUsingPOST(notifications: Notifications, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        saveNotificationUsingPOSTWithRequestBuilder(notifications: notifications).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     saveNotification
     - POST /api/v1/notifications
     - examples: [{output=none}]
     
     - parameter notifications: (body) notifications 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func saveNotificationUsingPOSTWithRequestBuilder(notifications: Notifications) -> RequestBuilder<JSONValue> {
        let path = "/api/v1/notifications"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: notifications)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     updateNotification
     
     - parameter notificationId: (path) notificationId 
     - parameter notifications: (body) notifications 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateNotificationUsingPUT(notificationId: Int64, notifications: Notifications, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        updateNotificationUsingPUTWithRequestBuilder(notificationId: notificationId, notifications: notifications).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     updateNotification
     - PUT /api/v1/notifications/{notificationId}
     - examples: [{output=none}]
     
     - parameter notificationId: (path) notificationId 
     - parameter notifications: (body) notifications 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func updateNotificationUsingPUTWithRequestBuilder(notificationId: Int64, notifications: Notifications) -> RequestBuilder<JSONValue> {
        var path = "/api/v1/notifications/{notificationId}"
        let notificationIdPreEscape = "\(notificationId)"
        let notificationIdPostEscape = notificationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{notificationId}", with: notificationIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: notifications)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
