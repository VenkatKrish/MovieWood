//
// OtpResourceControllerAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class OtpResourceControllerAPI {
    /**
     generateEmailOTP
     
     - parameter userId: (query) userId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func generateEmailOTPUsingPOST(userId: Int64, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        generateEmailOTPUsingPOSTWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     generateEmailOTP
     - POST /api/v1/generateemailotp
     - examples: [{contentType=application/json, example={
  "bytes": [
    123,
    125
  ],
  "empty": false
}}]
     
     - parameter userId: (query) userId 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func generateEmailOTPUsingPOSTWithRequestBuilder(userId: Int64) -> RequestBuilder<JSONValue> {
        let path = "/api/v1/generateemailotp"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": userId.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     generateLoginSMSOTP
     
     - parameter usernameRequest: (body) usernameRequest 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func generateLoginSMSOTPUsingPOST(usernameRequest: UsernameRequest, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        generateLoginSMSOTPUsingPOSTWithRequestBuilder(usernameRequest: usernameRequest).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     generateLoginSMSOTP
     - POST /api/v1/generateloginotp
     - examples: [{contentType=application/json, example={
  "bytes": [
    123,
    125
  ],
  "empty": false
}}]
     
     - parameter usernameRequest: (body) usernameRequest 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func generateLoginSMSOTPUsingPOSTWithRequestBuilder(usernameRequest: UsernameRequest) -> RequestBuilder<JSONValue> {
        let path = "/api/v1/generateloginotp"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: usernameRequest)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     generateSMSOTP
     
     - parameter userId: (query) userId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func generateSMSOTPUsingPOST(userId: Int64, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        generateSMSOTPUsingPOSTWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     generateSMSOTP
     - POST /api/v1/generatesmsotp
     - examples: [{contentType=application/json, example={
  "bytes": [
    123,
    125
  ],
  "empty": false
}}]
     
     - parameter userId: (query) userId 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func generateSMSOTPUsingPOSTWithRequestBuilder(userId: Int64) -> RequestBuilder<JSONValue> {
        let path = "/api/v1/generatesmsotp"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": userId.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     validateLoginOTP
     
     - parameter login: (body) login 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func validateLoginOTPUsingPOST(login: JSONValue, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        validateLoginOTPUsingPOSTWithRequestBuilder(login: login).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     validateLoginOTP
     - POST /api/v1/validateloginotp
     - examples: [{contentType=application/json, example={
  "bytes": [
    123,
    125
  ],
  "empty": false
}}]
     
     - parameter login: (body) login 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func validateLoginOTPUsingPOSTWithRequestBuilder(login: JSONValue) -> RequestBuilder<JSONValue> {
        let path = "/api/v1/validateloginotp"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: login)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     validateOTP
     
     - parameter otp: (body) otp 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func validateOTPUsingPOST(otp: JSONValue, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        validateOTPUsingPOSTWithRequestBuilder(otp: otp).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     validateOTP
     - POST /api/v1/validateotp
     - examples: [{contentType=application/json, example={
  "bytes": [
    123,
    125
  ],
  "empty": false
}}]
     
     - parameter otp: (body) otp 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func validateOTPUsingPOSTWithRequestBuilder(otp: JSONValue) -> RequestBuilder<JSONValue> {
        let path = "/api/v1/validateotp"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: otp)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
