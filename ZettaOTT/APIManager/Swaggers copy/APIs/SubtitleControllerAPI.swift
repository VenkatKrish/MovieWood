//
// SubtitleControllerAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class SubtitleControllerAPI {
    /**
     all
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func allUsingGET29(completion: @escaping ((_ data: [Subtitles]?,_ error: Error?) -> Void)) {
        allUsingGET29WithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     all
     - GET /api/v1/getallsubtitles
     - examples: [{output=none}]

     - returns: RequestBuilder<[Subtitles]> 
     */
    open class func allUsingGET29WithRequestBuilder() -> RequestBuilder<[Subtitles]> {
        let path = "/api/v1/getallsubtitles"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Subtitles]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     deleteSubtitles
     
     - parameter movieId: (path) movieId 
     - parameter subtitlesId: (path) subtitlesId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteSubtitlesUsingDELETE(movieId: Int64, subtitlesId: Int64, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        deleteSubtitlesUsingDELETEWithRequestBuilder(movieId: movieId, subtitlesId: subtitlesId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     deleteSubtitles
     - DELETE /api/v1/movie/{movieId}/subtitles/{subtitlesId}
     - examples: [{output=none}]
     
     - parameter movieId: (path) movieId 
     - parameter subtitlesId: (path) subtitlesId 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func deleteSubtitlesUsingDELETEWithRequestBuilder(movieId: Int64, subtitlesId: Int64) -> RequestBuilder<JSONValue> {
        var path = "/api/v1/movie/{movieId}/subtitles/{subtitlesId}"
        let movieIdPreEscape = "\(movieId)"
        let movieIdPostEscape = movieIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{movieId}", with: movieIdPostEscape, options: .literal, range: nil)
        let subtitlesIdPreEscape = "\(subtitlesId)"
        let subtitlesIdPostEscape = subtitlesIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{subtitlesId}", with: subtitlesIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     publicSubtitles
     
     - parameter movieId: (path) movieId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publicSubtitlesUsingGET(movieId: Int64, completion: @escaping ((_ data: [Subtitles]?,_ error: Error?) -> Void)) {
        publicSubtitlesUsingGETWithRequestBuilder(movieId: movieId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     publicSubtitles
     - GET /api/v1/public/subtitles/{movieId}
     - examples: [{output=none}]
     
     - parameter movieId: (path) movieId 

     - returns: RequestBuilder<[Subtitles]> 
     */
    open class func publicSubtitlesUsingGETWithRequestBuilder(movieId: Int64) -> RequestBuilder<[Subtitles]> {
        var path = "/api/v1/public/subtitles/{movieId}"
        let movieIdPreEscape = "\(movieId)"
        let movieIdPostEscape = movieIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{movieId}", with: movieIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Subtitles]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     saveSubtitles
     
     - parameter movieId: (path) movieId 
     - parameter subtitles: (body) subtitles 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func saveSubtitlesUsingPOST(movieId: Int64, subtitles: Subtitles, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        saveSubtitlesUsingPOSTWithRequestBuilder(movieId: movieId, subtitles: subtitles).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     saveSubtitles
     - POST /api/v1/movie/{movieId}/subtitles
     - examples: [{output=none}]
     
     - parameter movieId: (path) movieId 
     - parameter subtitles: (body) subtitles 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func saveSubtitlesUsingPOSTWithRequestBuilder(movieId: Int64, subtitles: Subtitles) -> RequestBuilder<JSONValue> {
        var path = "/api/v1/movie/{movieId}/subtitles"
        let movieIdPreEscape = "\(movieId)"
        let movieIdPostEscape = movieIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{movieId}", with: movieIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: subtitles)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     SubtitlesById
     
     - parameter subtitlesId: (path) subtitlesId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func subtitlesByIdUsingGET(subtitlesId: Int64, completion: @escaping ((_ data: Subtitles?,_ error: Error?) -> Void)) {
        subtitlesByIdUsingGETWithRequestBuilder(subtitlesId: subtitlesId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     SubtitlesById
     - GET /api/v1/subtitles/id/{subtitlesId}
     - examples: [{output=none}]
     
     - parameter subtitlesId: (path) subtitlesId 

     - returns: RequestBuilder<Subtitles> 
     */
    open class func subtitlesByIdUsingGETWithRequestBuilder(subtitlesId: Int64) -> RequestBuilder<Subtitles> {
        var path = "/api/v1/subtitles/id/{subtitlesId}"
        let subtitlesIdPreEscape = "\(subtitlesId)"
        let subtitlesIdPostEscape = subtitlesIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{subtitlesId}", with: subtitlesIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Subtitles>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Subtitles
     
     - parameter movieId: (path) movieId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func subtitlesUsingGET(movieId: Int64, completion: @escaping ((_ data: [Subtitles]?,_ error: Error?) -> Void)) {
        subtitlesUsingGETWithRequestBuilder(movieId: movieId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Subtitles
     - GET /api/v1/subtitles/{movieId}
     - examples: [{output=none}]
     
     - parameter movieId: (path) movieId 

     - returns: RequestBuilder<[Subtitles]> 
     */
    open class func subtitlesUsingGETWithRequestBuilder(movieId: Int64) -> RequestBuilder<[Subtitles]> {
        var path = "/api/v1/subtitles/{movieId}"
        let movieIdPreEscape = "\(movieId)"
        let movieIdPostEscape = movieIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{movieId}", with: movieIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Subtitles]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     updateSubtitles
     
     - parameter subtitles: (body) subtitles 
     - parameter subtitlesId: (path) subtitlesId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateSubtitlesUsingPUT(subtitles: Subtitles, subtitlesId: Int64, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        updateSubtitlesUsingPUTWithRequestBuilder(subtitles: subtitles, subtitlesId: subtitlesId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     updateSubtitles
     - PUT /api/v1/subtitles/{subtitlesId}
     - examples: [{output=none}]
     
     - parameter subtitles: (body) subtitles 
     - parameter subtitlesId: (path) subtitlesId 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func updateSubtitlesUsingPUTWithRequestBuilder(subtitles: Subtitles, subtitlesId: Int64) -> RequestBuilder<JSONValue> {
        var path = "/api/v1/subtitles/{subtitlesId}"
        let subtitlesIdPreEscape = "\(subtitlesId)"
        let subtitlesIdPostEscape = subtitlesIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{subtitlesId}", with: subtitlesIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: subtitles)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     uploadSubtitles
     
     - parameter file: (form) file 
     - parameter movieId: (path) movieId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func uploadSubtitlesUsingPOST(file: URL, movieId: Int64, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        uploadSubtitlesUsingPOSTWithRequestBuilder(file: file, movieId: movieId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     uploadSubtitles
     - POST /api/v1/movie/{movieId}/uploadsubtitles
     - examples: [{output=none}]
     
     - parameter file: (form) file 
     - parameter movieId: (path) movieId 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func uploadSubtitlesUsingPOSTWithRequestBuilder(file: URL, movieId: Int64) -> RequestBuilder<JSONValue> {
        var path = "/api/v1/movie/{movieId}/uploadsubtitles"
        let movieIdPreEscape = "\(movieId)"
        let movieIdPostEscape = movieIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{movieId}", with: movieIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "file": file
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
