//
// MovieActorControllerAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class MovieActorControllerAPI {
    /**
     all
     
     - parameter offset: (query)  (optional)
     - parameter pageNumber: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter paged: (query)  (optional)
     - parameter sortSorted: (query)  (optional)
     - parameter sortUnsorted: (query)  (optional)
     - parameter unpaged: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func allUsingGET9(offset: Int64? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, paged: Bool? = nil, sortSorted: Bool? = nil, sortUnsorted: Bool? = nil, unpaged: Bool? = nil, completion: @escaping ((_ data: PageMovieActors?,_ error: Error?) -> Void)) {
        allUsingGET9WithRequestBuilder(offset: offset, pageNumber: pageNumber, pageSize: pageSize, paged: paged, sortSorted: sortSorted, sortUnsorted: sortUnsorted, unpaged: unpaged).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     all
     - GET /api/v1/getallmovieactors
     - examples: [{output=none}]
     
     - parameter offset: (query)  (optional)
     - parameter pageNumber: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter paged: (query)  (optional)
     - parameter sortSorted: (query)  (optional)
     - parameter sortUnsorted: (query)  (optional)
     - parameter unpaged: (query)  (optional)

     - returns: RequestBuilder<PageMovieActors> 
     */
    open class func allUsingGET9WithRequestBuilder(offset: Int64? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, paged: Bool? = nil, sortSorted: Bool? = nil, sortUnsorted: Bool? = nil, unpaged: Bool? = nil) -> RequestBuilder<PageMovieActors> {
        let path = "/api/v1/getallmovieactors"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "offset": offset?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON(), 
            "paged": paged, 
            "sort.sorted": sortSorted, 
            "sort.unsorted": sortUnsorted, 
            "unpaged": unpaged
        ])

        let requestBuilder: RequestBuilder<PageMovieActors>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     deleteMovieActor
     
     - parameter movieActorId: (path) movieActorId 
     - parameter movieId: (path) movieId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteMovieActorUsingDELETE(movieActorId: Int64, movieId: Int64, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        deleteMovieActorUsingDELETEWithRequestBuilder(movieActorId: movieActorId, movieId: movieId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     deleteMovieActor
     - DELETE /api/v1/movie/{movieId}/movieactors/{movieActorId}
     - examples: [{output=none}]
     
     - parameter movieActorId: (path) movieActorId 
     - parameter movieId: (path) movieId 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func deleteMovieActorUsingDELETEWithRequestBuilder(movieActorId: Int64, movieId: Int64) -> RequestBuilder<JSONValue> {
        var path = "/api/v1/movie/{movieId}/movieactors/{movieActorId}"
        let movieActorIdPreEscape = "\(movieActorId)"
        let movieActorIdPostEscape = movieActorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{movieActorId}", with: movieActorIdPostEscape, options: .literal, range: nil)
        let movieIdPreEscape = "\(movieId)"
        let movieIdPostEscape = movieIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{movieId}", with: movieIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     movieActorsById
     
     - parameter movieActorId: (path) movieActorId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func movieActorsByIdUsingGET(movieActorId: Int64, completion: @escaping ((_ data: MovieActors?,_ error: Error?) -> Void)) {
        movieActorsByIdUsingGETWithRequestBuilder(movieActorId: movieActorId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     movieActorsById
     - GET /api/v1/movieactors/id/{movieActorId}
     - examples: [{output=none}]
     
     - parameter movieActorId: (path) movieActorId 

     - returns: RequestBuilder<MovieActors> 
     */
    open class func movieActorsByIdUsingGETWithRequestBuilder(movieActorId: Int64) -> RequestBuilder<MovieActors> {
        var path = "/api/v1/movieactors/id/{movieActorId}"
        let movieActorIdPreEscape = "\(movieActorId)"
        let movieActorIdPostEscape = movieActorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{movieActorId}", with: movieActorIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MovieActors>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     movieActors
     
     - parameter movieId: (path) movieId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func movieActorsUsingGET(movieId: Int64, completion: @escaping ((_ data: [MovieActors]?,_ error: Error?) -> Void)) {
        movieActorsUsingGETWithRequestBuilder(movieId: movieId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     movieActors
     - GET /api/v1/movieactors/{movieId}
     - examples: [{output=none}]
     
     - parameter movieId: (path) movieId 

     - returns: RequestBuilder<[MovieActors]> 
     */
    open class func movieActorsUsingGETWithRequestBuilder(movieId: Int64) -> RequestBuilder<[MovieActors]> {
        var path = "/api/v1/movieactors/{movieId}"
        let movieIdPreEscape = "\(movieId)"
        let movieIdPostEscape = movieIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{movieId}", with: movieIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[MovieActors]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     saveMovieActor
     
     - parameter movieActor: (body) movieActor 
     - parameter movieId: (path) movieId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func saveMovieActorUsingPOST(movieActor: MovieActors, movieId: Int64, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        saveMovieActorUsingPOSTWithRequestBuilder(movieActor: movieActor, movieId: movieId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     saveMovieActor
     - POST /api/v1/movie/{movieId}/movieactors
     - examples: [{output=none}]
     
     - parameter movieActor: (body) movieActor 
     - parameter movieId: (path) movieId 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func saveMovieActorUsingPOSTWithRequestBuilder(movieActor: MovieActors, movieId: Int64) -> RequestBuilder<JSONValue> {
        var path = "/api/v1/movie/{movieId}/movieactors"
        let movieIdPreEscape = "\(movieId)"
        let movieIdPostEscape = movieIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{movieId}", with: movieIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: movieActor)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     updateActor
     
     - parameter movieActorId: (path) movieActorId 
     - parameter movieactor: (body) movieactor 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateActorUsingPUT2(movieActorId: Int64, movieactor: MovieActors, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        updateActorUsingPUT2WithRequestBuilder(movieActorId: movieActorId, movieactor: movieactor).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     updateActor
     - PUT /api/v1/movieactors/{movieActorId}
     - examples: [{output=none}]
     
     - parameter movieActorId: (path) movieActorId 
     - parameter movieactor: (body) movieactor 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func updateActorUsingPUT2WithRequestBuilder(movieActorId: Int64, movieactor: MovieActors) -> RequestBuilder<JSONValue> {
        var path = "/api/v1/movieactors/{movieActorId}"
        let movieActorIdPreEscape = "\(movieActorId)"
        let movieActorIdPostEscape = movieActorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{movieActorId}", with: movieActorIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: movieactor)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
