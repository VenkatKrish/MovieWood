//
// DailyRateControllerAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class DailyRateControllerAPI {
    /**
     all
     
     - parameter offset: (query)  (optional)
     - parameter pageNumber: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter paged: (query)  (optional)
     - parameter sortSorted: (query)  (optional)
     - parameter sortUnsorted: (query)  (optional)
     - parameter unpaged: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func allUsingGET4(offset: Int64? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, paged: Bool? = nil, sortSorted: Bool? = nil, sortUnsorted: Bool? = nil, unpaged: Bool? = nil, completion: @escaping ((_ data: PageDailyRates?,_ error: Error?) -> Void)) {
        allUsingGET4WithRequestBuilder(offset: offset, pageNumber: pageNumber, pageSize: pageSize, paged: paged, sortSorted: sortSorted, sortUnsorted: sortUnsorted, unpaged: unpaged).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     all
     - GET /api/v1/getalldailyrates
     - examples: [{output=none}]
     
     - parameter offset: (query)  (optional)
     - parameter pageNumber: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter paged: (query)  (optional)
     - parameter sortSorted: (query)  (optional)
     - parameter sortUnsorted: (query)  (optional)
     - parameter unpaged: (query)  (optional)

     - returns: RequestBuilder<PageDailyRates> 
     */
    open class func allUsingGET4WithRequestBuilder(offset: Int64? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, paged: Bool? = nil, sortSorted: Bool? = nil, sortUnsorted: Bool? = nil, unpaged: Bool? = nil) -> RequestBuilder<PageDailyRates> {
        let path = "/api/v1/getalldailyrates"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "offset": offset?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON(), 
            "paged": paged, 
            "sort.sorted": sortSorted, 
            "sort.unsorted": sortUnsorted, 
            "unpaged": unpaged
        ])

        let requestBuilder: RequestBuilder<PageDailyRates>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     deleteDailyRAte
     
     - parameter dailyRateId: (path) dailyRateId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteDailyRAteUsingDELETE(dailyRateId: Int64, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        deleteDailyRAteUsingDELETEWithRequestBuilder(dailyRateId: dailyRateId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     deleteDailyRAte
     - DELETE /api/v1/dailyrates/{dailyRateId}
     - examples: [{output=none}]
     
     - parameter dailyRateId: (path) dailyRateId 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func deleteDailyRAteUsingDELETEWithRequestBuilder(dailyRateId: Int64) -> RequestBuilder<JSONValue> {
        var path = "/api/v1/dailyrates/{dailyRateId}"
        let dailyRateIdPreEscape = "\(dailyRateId)"
        let dailyRateIdPostEscape = dailyRateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{dailyRateId}", with: dailyRateIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     getDailyRate
     
     - parameter dailyRateId: (path) dailyRateId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDailyRateUsingGET(dailyRateId: Int64, completion: @escaping ((_ data: DailyRates?,_ error: Error?) -> Void)) {
        getDailyRateUsingGETWithRequestBuilder(dailyRateId: dailyRateId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     getDailyRate
     - GET /api/v1/dailyrates/{dailyRateId}
     - examples: [{output=none}]
     
     - parameter dailyRateId: (path) dailyRateId 

     - returns: RequestBuilder<DailyRates> 
     */
    open class func getDailyRateUsingGETWithRequestBuilder(dailyRateId: Int64) -> RequestBuilder<DailyRates> {
        var path = "/api/v1/dailyrates/{dailyRateId}"
        let dailyRateIdPreEscape = "\(dailyRateId)"
        let dailyRateIdPostEscape = dailyRateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{dailyRateId}", with: dailyRateIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DailyRates>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     getbyFromToCurrencies
     
     - parameter conversionDate: (query) conversionDate 
     - parameter fromCurrencyCode: (query) fromCurrencyCode 
     - parameter toCurrencyCode: (query) toCurrencyCode 
     - parameter offset: (query)  (optional)
     - parameter pageNumber: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter paged: (query)  (optional)
     - parameter sortSorted: (query)  (optional)
     - parameter sortUnsorted: (query)  (optional)
     - parameter unpaged: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getbyFromToCurrenciesUsingGET(conversionDate: Date, fromCurrencyCode: String, toCurrencyCode: String, offset: Int64? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, paged: Bool? = nil, sortSorted: Bool? = nil, sortUnsorted: Bool? = nil, unpaged: Bool? = nil, completion: @escaping ((_ data: [DailyRates]?,_ error: Error?) -> Void)) {
        getbyFromToCurrenciesUsingGETWithRequestBuilder(conversionDate: conversionDate, fromCurrencyCode: fromCurrencyCode, toCurrencyCode: toCurrencyCode, offset: offset, pageNumber: pageNumber, pageSize: pageSize, paged: paged, sortSorted: sortSorted, sortUnsorted: sortUnsorted, unpaged: unpaged).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     getbyFromToCurrencies
     - GET /api/v1/dailyrates
     - examples: [{output=none}]
     
     - parameter conversionDate: (query) conversionDate 
     - parameter fromCurrencyCode: (query) fromCurrencyCode 
     - parameter toCurrencyCode: (query) toCurrencyCode 
     - parameter offset: (query)  (optional)
     - parameter pageNumber: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter paged: (query)  (optional)
     - parameter sortSorted: (query)  (optional)
     - parameter sortUnsorted: (query)  (optional)
     - parameter unpaged: (query)  (optional)

     - returns: RequestBuilder<[DailyRates]> 
     */
    open class func getbyFromToCurrenciesUsingGETWithRequestBuilder(conversionDate: Date, fromCurrencyCode: String, toCurrencyCode: String, offset: Int64? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, paged: Bool? = nil, sortSorted: Bool? = nil, sortUnsorted: Bool? = nil, unpaged: Bool? = nil) -> RequestBuilder<[DailyRates]> {
        let path = "/api/v1/dailyrates"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "conversionDate": conversionDate.encodeToJSON(), 
            "fromCurrencyCode": fromCurrencyCode, 
            "offset": offset?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON(), 
            "paged": paged, 
            "sort.sorted": sortSorted, 
            "sort.unsorted": sortUnsorted, 
            "toCurrencyCode": toCurrencyCode, 
            "unpaged": unpaged
        ])

        let requestBuilder: RequestBuilder<[DailyRates]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     saveActor
     
     - parameter dailyRate: (body) dailyRate 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func saveActorUsingPOST1(dailyRate: DailyRates, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        saveActorUsingPOST1WithRequestBuilder(dailyRate: dailyRate).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     saveActor
     - POST /api/v1/dailyrates
     - examples: [{output=none}]
     
     - parameter dailyRate: (body) dailyRate 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func saveActorUsingPOST1WithRequestBuilder(dailyRate: DailyRates) -> RequestBuilder<JSONValue> {
        let path = "/api/v1/dailyrates"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: dailyRate)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     updateDailyRate
     
     - parameter dailyRate: (body) dailyRate 
     - parameter dailyRateId: (path) dailyRateId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateDailyRateUsingPUT(dailyRate: DailyRates, dailyRateId: Int64, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        updateDailyRateUsingPUTWithRequestBuilder(dailyRate: dailyRate, dailyRateId: dailyRateId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     updateDailyRate
     - PUT /api/v1/dailyrates/{dailyRateId}
     - examples: [{output=none}]
     
     - parameter dailyRate: (body) dailyRate 
     - parameter dailyRateId: (path) dailyRateId 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func updateDailyRateUsingPUTWithRequestBuilder(dailyRate: DailyRates, dailyRateId: Int64) -> RequestBuilder<JSONValue> {
        var path = "/api/v1/dailyrates/{dailyRateId}"
        let dailyRateIdPreEscape = "\(dailyRateId)"
        let dailyRateIdPostEscape = dailyRateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{dailyRateId}", with: dailyRateIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: dailyRate)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
