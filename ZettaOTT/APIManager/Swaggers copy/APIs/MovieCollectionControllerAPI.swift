//
// MovieCollectionControllerAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class MovieCollectionControllerAPI {
    /**
     all
     
     - parameter offset: (query)  (optional)
     - parameter pageNumber: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter paged: (query)  (optional)
     - parameter sortSorted: (query)  (optional)
     - parameter sortUnsorted: (query)  (optional)
     - parameter unpaged: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func allUsingGET10(offset: Int64? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, paged: Bool? = nil, sortSorted: Bool? = nil, sortUnsorted: Bool? = nil, unpaged: Bool? = nil, completion: @escaping ((_ data: PageMovieCollections?,_ error: Error?) -> Void)) {
        allUsingGET10WithRequestBuilder(offset: offset, pageNumber: pageNumber, pageSize: pageSize, paged: paged, sortSorted: sortSorted, sortUnsorted: sortUnsorted, unpaged: unpaged).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     all
     - GET /api/v1/moviecollections/getall
     - examples: [{output=none}]
     
     - parameter offset: (query)  (optional)
     - parameter pageNumber: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter paged: (query)  (optional)
     - parameter sortSorted: (query)  (optional)
     - parameter sortUnsorted: (query)  (optional)
     - parameter unpaged: (query)  (optional)

     - returns: RequestBuilder<PageMovieCollections> 
     */
    open class func allUsingGET10WithRequestBuilder(offset: Int64? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, paged: Bool? = nil, sortSorted: Bool? = nil, sortUnsorted: Bool? = nil, unpaged: Bool? = nil) -> RequestBuilder<PageMovieCollections> {
        let path = "/api/v1/moviecollections/getall"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "offset": offset?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON(), 
            "paged": paged, 
            "sort.sorted": sortSorted, 
            "sort.unsorted": sortUnsorted, 
            "unpaged": unpaged
        ])

        let requestBuilder: RequestBuilder<PageMovieCollections>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     deleteMovieCollection
     
     - parameter _id: (path) id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteMovieCollectionUsingDELETE(_id: Int64, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        deleteMovieCollectionUsingDELETEWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     deleteMovieCollection
     - DELETE /api/v1/moviecollections/{id}
     - examples: [{output=none}]
     
     - parameter _id: (path) id 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func deleteMovieCollectionUsingDELETEWithRequestBuilder(_id: Int64) -> RequestBuilder<JSONValue> {
        var path = "/api/v1/moviecollections/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     movieCollectionsByCollectionPublic
     
     - parameter _id: (path) id 
     - parameter offset: (query)  (optional)
     - parameter pageNumber: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter paged: (query)  (optional)
     - parameter sortSorted: (query)  (optional)
     - parameter sortUnsorted: (query)  (optional)
     - parameter unpaged: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func movieCollectionsByCollectionPublicUsingGET(_id: Int64, offset: Int64? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, paged: Bool? = nil, sortSorted: Bool? = nil, sortUnsorted: Bool? = nil, unpaged: Bool? = nil, completion: @escaping ((_ data: PageMovieCollections?,_ error: Error?) -> Void)) {
        movieCollectionsByCollectionPublicUsingGETWithRequestBuilder(_id: _id, offset: offset, pageNumber: pageNumber, pageSize: pageSize, paged: paged, sortSorted: sortSorted, sortUnsorted: sortUnsorted, unpaged: unpaged).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     movieCollectionsByCollectionPublic
     - GET /api/v1/public/moviecollections/bycollection/{id}
     - examples: [{output=none}]
     
     - parameter _id: (path) id 
     - parameter offset: (query)  (optional)
     - parameter pageNumber: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter paged: (query)  (optional)
     - parameter sortSorted: (query)  (optional)
     - parameter sortUnsorted: (query)  (optional)
     - parameter unpaged: (query)  (optional)

     - returns: RequestBuilder<PageMovieCollections> 
     */
    open class func movieCollectionsByCollectionPublicUsingGETWithRequestBuilder(_id: Int64, offset: Int64? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, paged: Bool? = nil, sortSorted: Bool? = nil, sortUnsorted: Bool? = nil, unpaged: Bool? = nil) -> RequestBuilder<PageMovieCollections> {
        var path = "/api/v1/public/moviecollections/bycollection/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "offset": offset?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON(), 
            "paged": paged, 
            "sort.sorted": sortSorted, 
            "sort.unsorted": sortUnsorted, 
            "unpaged": unpaged
        ])

        let requestBuilder: RequestBuilder<PageMovieCollections>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     movieCollectionsByCollection
     
     - parameter _id: (path) id 
     - parameter offset: (query)  (optional)
     - parameter pageNumber: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter paged: (query)  (optional)
     - parameter sortSorted: (query)  (optional)
     - parameter sortUnsorted: (query)  (optional)
     - parameter unpaged: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func movieCollectionsByCollectionUsingGET(_id: Int64, offset: Int64? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, paged: Bool? = nil, sortSorted: Bool? = nil, sortUnsorted: Bool? = nil, unpaged: Bool? = nil, completion: @escaping ((_ data: PageMovieCollections?,_ error: Error?) -> Void)) {
        movieCollectionsByCollectionUsingGETWithRequestBuilder(_id: _id, offset: offset, pageNumber: pageNumber, pageSize: pageSize, paged: paged, sortSorted: sortSorted, sortUnsorted: sortUnsorted, unpaged: unpaged).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     movieCollectionsByCollection
     - GET /api/v1/moviecollections/bycollection/{id}
     - examples: [{output=none}]
     
     - parameter _id: (path) id 
     - parameter offset: (query)  (optional)
     - parameter pageNumber: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter paged: (query)  (optional)
     - parameter sortSorted: (query)  (optional)
     - parameter sortUnsorted: (query)  (optional)
     - parameter unpaged: (query)  (optional)

     - returns: RequestBuilder<PageMovieCollections> 
     */
    open class func movieCollectionsByCollectionUsingGETWithRequestBuilder(_id: Int64, offset: Int64? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, paged: Bool? = nil, sortSorted: Bool? = nil, sortUnsorted: Bool? = nil, unpaged: Bool? = nil) -> RequestBuilder<PageMovieCollections> {
        var path = "/api/v1/moviecollections/bycollection/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "offset": offset?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON(), 
            "paged": paged, 
            "sort.sorted": sortSorted, 
            "sort.unsorted": sortUnsorted, 
            "unpaged": unpaged
        ])

        let requestBuilder: RequestBuilder<PageMovieCollections>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     movieCollectionsById
     
     - parameter _id: (path) id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func movieCollectionsByIdUsingGET(_id: Int64, completion: @escaping ((_ data: MovieCollections?,_ error: Error?) -> Void)) {
        movieCollectionsByIdUsingGETWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     movieCollectionsById
     - GET /api/v1/moviecollections/{id}
     - examples: [{output=none}]
     
     - parameter _id: (path) id 

     - returns: RequestBuilder<MovieCollections> 
     */
    open class func movieCollectionsByIdUsingGETWithRequestBuilder(_id: Int64) -> RequestBuilder<MovieCollections> {
        var path = "/api/v1/moviecollections/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MovieCollections>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     movieCollections
     
     - parameter movieId: (path) movieId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func movieCollectionsUsingGET(movieId: Int64, completion: @escaping ((_ data: [MovieCollections]?,_ error: Error?) -> Void)) {
        movieCollectionsUsingGETWithRequestBuilder(movieId: movieId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     movieCollections
     - GET /api/v1/moviecollections/movie/{movieId}
     - examples: [{output=none}]
     
     - parameter movieId: (path) movieId 

     - returns: RequestBuilder<[MovieCollections]> 
     */
    open class func movieCollectionsUsingGETWithRequestBuilder(movieId: Int64) -> RequestBuilder<[MovieCollections]> {
        var path = "/api/v1/moviecollections/movie/{movieId}"
        let movieIdPreEscape = "\(movieId)"
        let movieIdPostEscape = movieIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{movieId}", with: movieIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[MovieCollections]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     saveMovieCollection
     
     - parameter movieCollection: (body) movieCollection 
     - parameter movieId: (path) movieId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func saveMovieCollectionUsingPOST(movieCollection: MovieCollections, movieId: Int64, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        saveMovieCollectionUsingPOSTWithRequestBuilder(movieCollection: movieCollection, movieId: movieId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     saveMovieCollection
     - POST /api/v1/movie/{movieId}/moviecollections
     - examples: [{output=none}]
     
     - parameter movieCollection: (body) movieCollection 
     - parameter movieId: (path) movieId 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func saveMovieCollectionUsingPOSTWithRequestBuilder(movieCollection: MovieCollections, movieId: Int64) -> RequestBuilder<JSONValue> {
        var path = "/api/v1/movie/{movieId}/moviecollections"
        let movieIdPreEscape = "\(movieId)"
        let movieIdPostEscape = movieIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{movieId}", with: movieIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: movieCollection)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     updateMovieCollection
     
     - parameter _id: (path) id 
     - parameter rbody: (body) rbody 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateMovieCollectionUsingPUT(_id: Int64, rbody: MovieCollections, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        updateMovieCollectionUsingPUTWithRequestBuilder(_id: _id, rbody: rbody).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     updateMovieCollection
     - PUT /api/v1/moviecollections/{id}
     - examples: [{output=none}]
     
     - parameter _id: (path) id 
     - parameter rbody: (body) rbody 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func updateMovieCollectionUsingPUTWithRequestBuilder(_id: Int64, rbody: MovieCollections) -> RequestBuilder<JSONValue> {
        var path = "/api/v1/moviecollections/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: rbody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
