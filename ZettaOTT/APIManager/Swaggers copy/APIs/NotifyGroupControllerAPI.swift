//
// NotifyGroupControllerAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class NotifyGroupControllerAPI {
    /**
     all
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func allUsingGET21(completion: @escaping ((_ data: [NotificationGroups]?,_ error: Error?) -> Void)) {
        allUsingGET21WithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     all
     - GET /api/v1/getallnotifygroups
     - examples: [{output=none}]

     - returns: RequestBuilder<[NotificationGroups]> 
     */
    open class func allUsingGET21WithRequestBuilder() -> RequestBuilder<[NotificationGroups]> {
        let path = "/api/v1/getallnotifygroups"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[NotificationGroups]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     deleteNotificationGroup
     
     - parameter notificationGroupId: (path) notificationGroupId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteNotificationGroupUsingDELETE(notificationGroupId: Int64, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        deleteNotificationGroupUsingDELETEWithRequestBuilder(notificationGroupId: notificationGroupId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     deleteNotificationGroup
     - DELETE /api/v1/notifygroups/{notificationGroupId}
     - examples: [{output=none}]
     
     - parameter notificationGroupId: (path) notificationGroupId 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func deleteNotificationGroupUsingDELETEWithRequestBuilder(notificationGroupId: Int64) -> RequestBuilder<JSONValue> {
        var path = "/api/v1/notifygroups/{notificationGroupId}"
        let notificationGroupIdPreEscape = "\(notificationGroupId)"
        let notificationGroupIdPostEscape = notificationGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{notificationGroupId}", with: notificationGroupIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     saveNotificationGroup
     
     - parameter notificationGroups: (body) notificationGroups 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func saveNotificationGroupUsingPOST(notificationGroups: NotificationGroups, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        saveNotificationGroupUsingPOSTWithRequestBuilder(notificationGroups: notificationGroups).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     saveNotificationGroup
     - POST /api/v1/notifygroups
     - examples: [{output=none}]
     
     - parameter notificationGroups: (body) notificationGroups 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func saveNotificationGroupUsingPOSTWithRequestBuilder(notificationGroups: NotificationGroups) -> RequestBuilder<JSONValue> {
        let path = "/api/v1/notifygroups"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: notificationGroups)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     updateNotificationGroup
     
     - parameter notificationGroupId: (path) notificationGroupId 
     - parameter notificationGroups: (body) notificationGroups 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateNotificationGroupUsingPUT(notificationGroupId: Int64, notificationGroups: NotificationGroups, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        updateNotificationGroupUsingPUTWithRequestBuilder(notificationGroupId: notificationGroupId, notificationGroups: notificationGroups).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     updateNotificationGroup
     - PUT /api/v1/notifygroups/{notificationGroupId}
     - examples: [{output=none}]
     
     - parameter notificationGroupId: (path) notificationGroupId 
     - parameter notificationGroups: (body) notificationGroups 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func updateNotificationGroupUsingPUTWithRequestBuilder(notificationGroupId: Int64, notificationGroups: NotificationGroups) -> RequestBuilder<JSONValue> {
        var path = "/api/v1/notifygroups/{notificationGroupId}"
        let notificationGroupIdPreEscape = "\(notificationGroupId)"
        let notificationGroupIdPostEscape = notificationGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{notificationGroupId}", with: notificationGroupIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: notificationGroups)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
