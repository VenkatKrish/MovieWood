//
// ActorControllerAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class ActorControllerAPI {
    /**
     all
     
     - parameter offset: (query)  (optional)
     - parameter pageNumber: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter paged: (query)  (optional)
     - parameter sortSorted: (query)  (optional)
     - parameter sortUnsorted: (query)  (optional)
     - parameter unpaged: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func allUsingGET(offset: Int64? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, paged: Bool? = nil, sortSorted: Bool? = nil, sortUnsorted: Bool? = nil, unpaged: Bool? = nil, completion: @escaping ((_ data: PageActors?,_ error: Error?) -> Void)) {
        allUsingGETWithRequestBuilder(offset: offset, pageNumber: pageNumber, pageSize: pageSize, paged: paged, sortSorted: sortSorted, sortUnsorted: sortUnsorted, unpaged: unpaged).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     all
     - GET /api/v1/getallactors
     - examples: [{output=none}]
     
     - parameter offset: (query)  (optional)
     - parameter pageNumber: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter paged: (query)  (optional)
     - parameter sortSorted: (query)  (optional)
     - parameter sortUnsorted: (query)  (optional)
     - parameter unpaged: (query)  (optional)

     - returns: RequestBuilder<PageActors> 
     */
    open class func allUsingGETWithRequestBuilder(offset: Int64? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, paged: Bool? = nil, sortSorted: Bool? = nil, sortUnsorted: Bool? = nil, unpaged: Bool? = nil) -> RequestBuilder<PageActors> {
        let path = "/api/v1/getallactors"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "offset": offset?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON(), 
            "paged": paged, 
            "sort.sorted": sortSorted, 
            "sort.unsorted": sortUnsorted, 
            "unpaged": unpaged
        ])

        let requestBuilder: RequestBuilder<PageActors>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     deleteActor
     
     - parameter actorId: (path) actorId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteActorUsingDELETE(actorId: Int64, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        deleteActorUsingDELETEWithRequestBuilder(actorId: actorId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     deleteActor
     - DELETE /api/v1/actors/{actorId}
     - examples: [{output=none}]
     
     - parameter actorId: (path) actorId 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func deleteActorUsingDELETEWithRequestBuilder(actorId: Int64) -> RequestBuilder<JSONValue> {
        var path = "/api/v1/actors/{actorId}"
        let actorIdPreEscape = "\(actorId)"
        let actorIdPostEscape = actorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{actorId}", with: actorIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     getActor
     
     - parameter actorId: (path) actorId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getActorUsingGET(actorId: Int64, completion: @escaping ((_ data: Actors?,_ error: Error?) -> Void)) {
        getActorUsingGETWithRequestBuilder(actorId: actorId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     getActor
     - GET /api/v1/actors/{actorId}
     - examples: [{output=none}]
     
     - parameter actorId: (path) actorId 

     - returns: RequestBuilder<Actors> 
     */
    open class func getActorUsingGETWithRequestBuilder(actorId: Int64) -> RequestBuilder<Actors> {
        var path = "/api/v1/actors/{actorId}"
        let actorIdPreEscape = "\(actorId)"
        let actorIdPostEscape = actorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{actorId}", with: actorIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Actors>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     getbyActorName
     
     - parameter actorName: (query) actorName 
     - parameter offset: (query)  (optional)
     - parameter pageNumber: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter paged: (query)  (optional)
     - parameter sortSorted: (query)  (optional)
     - parameter sortUnsorted: (query)  (optional)
     - parameter unpaged: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getbyActorNameUsingGET(actorName: String, offset: Int64? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, paged: Bool? = nil, sortSorted: Bool? = nil, sortUnsorted: Bool? = nil, unpaged: Bool? = nil, completion: @escaping ((_ data: PageActors?,_ error: Error?) -> Void)) {
        getbyActorNameUsingGETWithRequestBuilder(actorName: actorName, offset: offset, pageNumber: pageNumber, pageSize: pageSize, paged: paged, sortSorted: sortSorted, sortUnsorted: sortUnsorted, unpaged: unpaged).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     getbyActorName
     - GET /api/v1/actors
     - examples: [{output=none}]
     
     - parameter actorName: (query) actorName 
     - parameter offset: (query)  (optional)
     - parameter pageNumber: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter paged: (query)  (optional)
     - parameter sortSorted: (query)  (optional)
     - parameter sortUnsorted: (query)  (optional)
     - parameter unpaged: (query)  (optional)

     - returns: RequestBuilder<PageActors> 
     */
    open class func getbyActorNameUsingGETWithRequestBuilder(actorName: String, offset: Int64? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, paged: Bool? = nil, sortSorted: Bool? = nil, sortUnsorted: Bool? = nil, unpaged: Bool? = nil) -> RequestBuilder<PageActors> {
        let path = "/api/v1/actors"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "actorName": actorName, 
            "offset": offset?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON(), 
            "paged": paged, 
            "sort.sorted": sortSorted, 
            "sort.unsorted": sortUnsorted, 
            "unpaged": unpaged
        ])

        let requestBuilder: RequestBuilder<PageActors>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     saveActor
     
     - parameter actor: (body) actor 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func saveActorUsingPOST(actor: Actors, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        saveActorUsingPOSTWithRequestBuilder(actor: actor).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     saveActor
     - POST /api/v1/actors
     - examples: [{output=none}]
     
     - parameter actor: (body) actor 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func saveActorUsingPOSTWithRequestBuilder(actor: Actors) -> RequestBuilder<JSONValue> {
        let path = "/api/v1/actors"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: actor)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     updateActor
     
     - parameter actor: (body) actor 
     - parameter actorId: (path) actorId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateActorUsingPUT(actor: Actors, actorId: Int64, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        updateActorUsingPUTWithRequestBuilder(actor: actor, actorId: actorId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     updateActor
     - PUT /api/v1/actors/{actorId}
     - examples: [{output=none}]
     
     - parameter actor: (body) actor 
     - parameter actorId: (path) actorId 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func updateActorUsingPUTWithRequestBuilder(actor: Actors, actorId: Int64) -> RequestBuilder<JSONValue> {
        var path = "/api/v1/actors/{actorId}"
        let actorIdPreEscape = "\(actorId)"
        let actorIdPostEscape = actorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{actorId}", with: actorIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: actor)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     uploadImage
     
     - parameter actorId: (path) actorId 
     - parameter file: (form) file 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func uploadImageUsingPOST(actorId: Int64, file: URL, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        uploadImageUsingPOSTWithRequestBuilder(actorId: actorId, file: file).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     uploadImage
     - POST /api/v1/uploadactorimage/{actorId}
     - examples: [{output=none}]
     
     - parameter actorId: (path) actorId 
     - parameter file: (form) file 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func uploadImageUsingPOSTWithRequestBuilder(actorId: Int64, file: URL) -> RequestBuilder<JSONValue> {
        var path = "/api/v1/uploadactorimage/{actorId}"
        let actorIdPreEscape = "\(actorId)"
        let actorIdPostEscape = actorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{actorId}", with: actorIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "file": file
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
