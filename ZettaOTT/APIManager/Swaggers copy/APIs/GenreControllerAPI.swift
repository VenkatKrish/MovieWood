//
// GenreControllerAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class GenreControllerAPI {
    /**
     allPublic
     
     - parameter offset: (query)  (optional)
     - parameter pageNumber: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter paged: (query)  (optional)
     - parameter sortSorted: (query)  (optional)
     - parameter sortUnsorted: (query)  (optional)
     - parameter unpaged: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func allPublicUsingGET(offset: Int64? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, paged: Bool? = nil, sortSorted: Bool? = nil, sortUnsorted: Bool? = nil, unpaged: Bool? = nil, completion: @escaping ((_ data: PageGenres?,_ error: Error?) -> Void)) {
        allPublicUsingGETWithRequestBuilder(offset: offset, pageNumber: pageNumber, pageSize: pageSize, paged: paged, sortSorted: sortSorted, sortUnsorted: sortUnsorted, unpaged: unpaged).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     allPublic
     - GET /api/v1/public/getallgenres
     - examples: [{output=none}]
     
     - parameter offset: (query)  (optional)
     - parameter pageNumber: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter paged: (query)  (optional)
     - parameter sortSorted: (query)  (optional)
     - parameter sortUnsorted: (query)  (optional)
     - parameter unpaged: (query)  (optional)

     - returns: RequestBuilder<PageGenres> 
     */
    open class func allPublicUsingGETWithRequestBuilder(offset: Int64? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, paged: Bool? = nil, sortSorted: Bool? = nil, sortUnsorted: Bool? = nil, unpaged: Bool? = nil) -> RequestBuilder<PageGenres> {
        let path = "/api/v1/public/getallgenres"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "offset": offset?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON(), 
            "paged": paged, 
            "sort.sorted": sortSorted, 
            "sort.unsorted": sortUnsorted, 
            "unpaged": unpaged
        ])

        let requestBuilder: RequestBuilder<PageGenres>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     all
     
     - parameter offset: (query)  (optional)
     - parameter pageNumber: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter paged: (query)  (optional)
     - parameter sortSorted: (query)  (optional)
     - parameter sortUnsorted: (query)  (optional)
     - parameter unpaged: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func allUsingGET6(offset: Int64? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, paged: Bool? = nil, sortSorted: Bool? = nil, sortUnsorted: Bool? = nil, unpaged: Bool? = nil, completion: @escaping ((_ data: PageGenres?,_ error: Error?) -> Void)) {
        allUsingGET6WithRequestBuilder(offset: offset, pageNumber: pageNumber, pageSize: pageSize, paged: paged, sortSorted: sortSorted, sortUnsorted: sortUnsorted, unpaged: unpaged).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     all
     - GET /api/v1/getallgenres
     - examples: [{output=none}]
     
     - parameter offset: (query)  (optional)
     - parameter pageNumber: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter paged: (query)  (optional)
     - parameter sortSorted: (query)  (optional)
     - parameter sortUnsorted: (query)  (optional)
     - parameter unpaged: (query)  (optional)

     - returns: RequestBuilder<PageGenres> 
     */
    open class func allUsingGET6WithRequestBuilder(offset: Int64? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, paged: Bool? = nil, sortSorted: Bool? = nil, sortUnsorted: Bool? = nil, unpaged: Bool? = nil) -> RequestBuilder<PageGenres> {
        let path = "/api/v1/getallgenres"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "offset": offset?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON(), 
            "paged": paged, 
            "sort.sorted": sortSorted, 
            "sort.unsorted": sortUnsorted, 
            "unpaged": unpaged
        ])

        let requestBuilder: RequestBuilder<PageGenres>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     deleteGenre
     
     - parameter genreId: (path) genreId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteGenreUsingDELETE(genreId: Int64, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        deleteGenreUsingDELETEWithRequestBuilder(genreId: genreId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     deleteGenre
     - DELETE /api/v1/genres/{genreId}
     - examples: [{output=none}]
     
     - parameter genreId: (path) genreId 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func deleteGenreUsingDELETEWithRequestBuilder(genreId: Int64) -> RequestBuilder<JSONValue> {
        var path = "/api/v1/genres/{genreId}"
        let genreIdPreEscape = "\(genreId)"
        let genreIdPostEscape = genreIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{genreId}", with: genreIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     getGenre
     
     - parameter genreId: (path) genreId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGenreUsingGET1(genreId: Int64, completion: @escaping ((_ data: Genres?,_ error: Error?) -> Void)) {
        getGenreUsingGET1WithRequestBuilder(genreId: genreId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     getGenre
     - GET /api/v1/genres/{genreId}
     - examples: [{output=none}]
     
     - parameter genreId: (path) genreId 

     - returns: RequestBuilder<Genres> 
     */
    open class func getGenreUsingGET1WithRequestBuilder(genreId: Int64) -> RequestBuilder<Genres> {
        var path = "/api/v1/genres/{genreId}"
        let genreIdPreEscape = "\(genreId)"
        let genreIdPostEscape = genreIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{genreId}", with: genreIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Genres>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     saveGenre
     
     - parameter genre: (body) genre 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func saveGenreUsingPOST(genre: Genres, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        saveGenreUsingPOSTWithRequestBuilder(genre: genre).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     saveGenre
     - POST /api/v1/genres
     - examples: [{output=none}]
     
     - parameter genre: (body) genre 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func saveGenreUsingPOSTWithRequestBuilder(genre: Genres) -> RequestBuilder<JSONValue> {
        let path = "/api/v1/genres"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: genre)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     updateGenre
     
     - parameter genre: (body) genre 
     - parameter genreId: (path) genreId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateGenreUsingPUT(genre: Genres, genreId: Int64, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        updateGenreUsingPUTWithRequestBuilder(genre: genre, genreId: genreId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     updateGenre
     - PUT /api/v1/genres/{genreId}
     - examples: [{output=none}]
     
     - parameter genre: (body) genre 
     - parameter genreId: (path) genreId 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func updateGenreUsingPUTWithRequestBuilder(genre: Genres, genreId: Int64) -> RequestBuilder<JSONValue> {
        var path = "/api/v1/genres/{genreId}"
        let genreIdPreEscape = "\(genreId)"
        let genreIdPostEscape = genreIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{genreId}", with: genreIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: genre)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
