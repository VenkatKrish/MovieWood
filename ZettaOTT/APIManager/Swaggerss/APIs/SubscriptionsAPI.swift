//
// SubscriptionsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class SubscriptionsAPI {
    /**
     All

     - parameter contentType: (header)  
     - parameter authorization: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func all(contentType: String, authorization: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        allWithRequestBuilder(contentType: contentType, authorization: authorization).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     All
     - GET /cholaottservice/api/v1/subs/getall
     - 

     - parameter contentType: (header)  
     - parameter authorization: (header)  

     - returns: RequestBuilder<Void> 
     */
    open class func allWithRequestBuilder(contentType: String, authorization: String) -> RequestBuilder<Void> {
        let path = "/cholaottservice/api/v1/subs/getall"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Content-Type": contentType,
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     All Public

     - parameter sort: (query)  
     - parameter contentType: (header)  
     - parameter authorization: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func allPublic(sort: String, contentType: String, authorization: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        allPublicWithRequestBuilder(sort: sort, contentType: contentType, authorization: authorization).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     All Public
     - GET /cholaottservice/api/v1/subs/public/getall
     - 

     - parameter sort: (query)  
     - parameter contentType: (header)  
     - parameter authorization: (header)  

     - returns: RequestBuilder<Void> 
     */
    open class func allPublicWithRequestBuilder(sort: String, contentType: String, authorization: String) -> RequestBuilder<Void> {
        let path = "/cholaottservice/api/v1/subs/public/getall"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "sort": sort
        ])
        let nillableHeaders: [String: Any?] = [
                        "Content-Type": contentType,
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     Create

     - parameter body: (body)  
     - parameter contentType: (header)  
     - parameter authorization: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create2(body: String, contentType: String, authorization: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        create2WithRequestBuilder(body: body, contentType: contentType, authorization: authorization).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Create
     - POST /cholaottservice/api/v1/subs
     - 

     - parameter body: (body)  
     - parameter contentType: (header)  
     - parameter authorization: (header)  

     - returns: RequestBuilder<Void> 
     */
    open class func create2WithRequestBuilder(body: String, contentType: String, authorization: String) -> RequestBuilder<Void> {
        let path = "/cholaottservice/api/v1/subs"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Content-Type": contentType,
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }
    /**
     Delete

     - parameter contentType: (header)  
     - parameter authorization: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func delete5(contentType: String, authorization: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        delete5WithRequestBuilder(contentType: contentType, authorization: authorization).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete
     - DELETE /cholaottservice/api/v1/subs/1
     - 

     - parameter contentType: (header)  
     - parameter authorization: (header)  

     - returns: RequestBuilder<Void> 
     */
    open class func delete5WithRequestBuilder(contentType: String, authorization: String) -> RequestBuilder<Void> {
        let path = "/cholaottservice/api/v1/subs/1"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Content-Type": contentType,
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     Get Public

     - parameter contentType: (header)  
     - parameter authorization: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPublic(contentType: String, authorization: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getPublicWithRequestBuilder(contentType: contentType, authorization: authorization).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Get Public
     - GET /cholaottservice/api/v1/public/subs
     - 

     - parameter contentType: (header)  
     - parameter authorization: (header)  

     - returns: RequestBuilder<Void> 
     */
    open class func getPublicWithRequestBuilder(contentType: String, authorization: String) -> RequestBuilder<Void> {
        let path = "/cholaottservice/api/v1/public/subs"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Content-Type": contentType,
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     Update

     - parameter body: (body)  
     - parameter contentType: (header)  
     - parameter authorization: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func update4(body: String, contentType: String, authorization: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        update4WithRequestBuilder(body: body, contentType: contentType, authorization: authorization).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update
     - PUT /cholaottservice/api/v1/subs/1
     - 

     - parameter body: (body)  
     - parameter contentType: (header)  
     - parameter authorization: (header)  

     - returns: RequestBuilder<Void> 
     */
    open class func update4WithRequestBuilder(body: String, contentType: String, authorization: String) -> RequestBuilder<Void> {
        let path = "/cholaottservice/api/v1/subs/1"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Content-Type": contentType,
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }
}
