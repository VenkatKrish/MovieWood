//
// MovieSongsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class MovieSongsAPI {
    /**
     Create Movie Song

     - parameter body: (body)  
     - parameter contentType: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createMovieSong(body: String, contentType: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        createMovieSongWithRequestBuilder(body: body, contentType: contentType).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Create Movie Song
     - POST /cholaottservice/api/v1/movie/16/moviesongs
     - 

     - parameter body: (body)  
     - parameter contentType: (header)  

     - returns: RequestBuilder<Void> 
     */
    open class func createMovieSongWithRequestBuilder(body: String, contentType: String) -> RequestBuilder<Void> {
        let path = "/cholaottservice/api/v1/movie/16/moviesongs"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Content-Type": contentType
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }
    /**
     Create Movie Song Upload

     - parameter file: (form)  
     - parameter contentType: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createMovieSongUpload(file: Data, contentType: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        createMovieSongUploadWithRequestBuilder(file: file, contentType: contentType).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Create Movie Song Upload
     - POST /cholaottservice/api/v1/movie/16/uploadmoviesongs/1
     - 

     - parameter file: (form)  
     - parameter contentType: (header)  

     - returns: RequestBuilder<Void> 
     */
    open class func createMovieSongUploadWithRequestBuilder(file: Data, contentType: String) -> RequestBuilder<Void> {
        let path = "/cholaottservice/api/v1/movie/16/uploadmoviesongs/1"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
                "file": file
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Content-Type": contentType
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     Delete Movie Song

     - parameter contentType: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteMovieSong(contentType: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteMovieSongWithRequestBuilder(contentType: contentType).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete Movie Song
     - DELETE /cholaottservice/api/v1/movie/1/moviesongs/22
     - 

     - parameter contentType: (header)  

     - returns: RequestBuilder<Void> 
     */
    open class func deleteMovieSongWithRequestBuilder(contentType: String) -> RequestBuilder<Void> {
        let path = "/cholaottservice/api/v1/movie/1/moviesongs/22"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Content-Type": contentType
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     Get Movie Songs

     - parameter contentType: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMovieSongs(contentType: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getMovieSongsWithRequestBuilder(contentType: contentType).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Get Movie Songs
     - GET /cholaottservice/api/v1/moviesongs/1
     - 

     - parameter contentType: (header)  

     - returns: RequestBuilder<Void> 
     */
    open class func getMovieSongsWithRequestBuilder(contentType: String) -> RequestBuilder<Void> {
        let path = "/cholaottservice/api/v1/moviesongs/1"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Content-Type": contentType
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     Get One Movie Song

     - parameter contentType: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOneMovieSong(contentType: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getOneMovieSongWithRequestBuilder(contentType: contentType).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Get One Movie Song
     - GET /cholaottservice/api/v1/moviesongs/id/4
     - 

     - parameter contentType: (header)  

     - returns: RequestBuilder<Void> 
     */
    open class func getOneMovieSongWithRequestBuilder(contentType: String) -> RequestBuilder<Void> {
        let path = "/cholaottservice/api/v1/moviesongs/id/4"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Content-Type": contentType
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
}
