//
// CouponsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class CouponsAPI {
    /**
     All Coupons

     - parameter contentType: (header)  
     - parameter authorization: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func allCoupons(contentType: String, authorization: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        allCouponsWithRequestBuilder(contentType: contentType, authorization: authorization).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     All Coupons
     - GET /cholaottservice/api/v1/getallcoupons
     - 

     - parameter contentType: (header)  
     - parameter authorization: (header)  

     - returns: RequestBuilder<Void> 
     */
    open class func allCouponsWithRequestBuilder(contentType: String, authorization: String) -> RequestBuilder<Void> {
        let path = "/cholaottservice/api/v1/getallcoupons"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Content-Type": contentType,
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     Create Coupon

     - parameter body: (body)  
     - parameter contentType: (header)  
     - parameter authorization: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createCoupon(body: String, contentType: String, authorization: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        createCouponWithRequestBuilder(body: body, contentType: contentType, authorization: authorization).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Create Coupon
     - POST /cholaottservice/api/v1/coupons
     - 

     - parameter body: (body)  
     - parameter contentType: (header)  
     - parameter authorization: (header)  

     - returns: RequestBuilder<Void> 
     */
    open class func createCouponWithRequestBuilder(body: String, contentType: String, authorization: String) -> RequestBuilder<Void> {
        let path = "/cholaottservice/api/v1/coupons"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Content-Type": contentType,
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }
    /**
     Create Movie Coupon

     - parameter body: (body)  
     - parameter contentType: (header)  
     - parameter authorization: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createMovieCoupon(body: String, contentType: String, authorization: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        createMovieCouponWithRequestBuilder(body: body, contentType: contentType, authorization: authorization).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Create Movie Coupon
     - POST /cholaottservice/api/v1/movie/37/moviecoupons
     - 

     - parameter body: (body)  
     - parameter contentType: (header)  
     - parameter authorization: (header)  

     - returns: RequestBuilder<Void> 
     */
    open class func createMovieCouponWithRequestBuilder(body: String, contentType: String, authorization: String) -> RequestBuilder<Void> {
        let path = "/cholaottservice/api/v1/movie/37/moviecoupons"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Content-Type": contentType,
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }
    /**
     Delete Coupon

     - parameter contentType: (header)  
     - parameter authorization: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteCoupon(contentType: String, authorization: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteCouponWithRequestBuilder(contentType: contentType, authorization: authorization).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete Coupon
     - DELETE /cholaottservice/api/v1/coupons/22
     - 

     - parameter contentType: (header)  
     - parameter authorization: (header)  

     - returns: RequestBuilder<Void> 
     */
    open class func deleteCouponWithRequestBuilder(contentType: String, authorization: String) -> RequestBuilder<Void> {
        let path = "/cholaottservice/api/v1/coupons/22"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Content-Type": contentType,
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     Delete Movie Coupon

     - parameter contentType: (header)  
     - parameter authorization: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteMovieCoupon(contentType: String, authorization: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteMovieCouponWithRequestBuilder(contentType: contentType, authorization: authorization).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete Movie Coupon
     - DELETE /cholaottservice/api/v1/movie/1/moviecoupons/22
     - 

     - parameter contentType: (header)  
     - parameter authorization: (header)  

     - returns: RequestBuilder<Void> 
     */
    open class func deleteMovieCouponWithRequestBuilder(contentType: String, authorization: String) -> RequestBuilder<Void> {
        let path = "/cholaottservice/api/v1/movie/1/moviecoupons/22"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Content-Type": contentType,
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     Get Coupons By Movie

     - parameter contentType: (header)  
     - parameter authorization: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCouponsByMovie(contentType: String, authorization: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getCouponsByMovieWithRequestBuilder(contentType: contentType, authorization: authorization).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Get Coupons By Movie
     - GET /cholaottservice/api/v1/moviecouponsbymovie/16
     - 

     - parameter contentType: (header)  
     - parameter authorization: (header)  

     - returns: RequestBuilder<Void> 
     */
    open class func getCouponsByMovieWithRequestBuilder(contentType: String, authorization: String) -> RequestBuilder<Void> {
        let path = "/cholaottservice/api/v1/moviecouponsbymovie/16"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Content-Type": contentType,
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     Update Coupon

     - parameter body: (body)  
     - parameter contentType: (header)  
     - parameter authorization: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateCoupon(body: String, contentType: String, authorization: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateCouponWithRequestBuilder(body: body, contentType: contentType, authorization: authorization).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update Coupon
     - PUT /cholaottservice/api/v1/coupons/22
     - 

     - parameter body: (body)  
     - parameter contentType: (header)  
     - parameter authorization: (header)  

     - returns: RequestBuilder<Void> 
     */
    open class func updateCouponWithRequestBuilder(body: String, contentType: String, authorization: String) -> RequestBuilder<Void> {
        let path = "/cholaottservice/api/v1/coupons/22"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Content-Type": contentType,
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }
    /**
     Verify Coupon

     - parameter body: (body)  
     - parameter contentType: (header)  
     - parameter authorization: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func verifyCoupon(body: String, contentType: String, authorization: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        verifyCouponWithRequestBuilder(body: body, contentType: contentType, authorization: authorization).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Verify Coupon
     - POST /cholaottservice/api/v1/validatemoviecoupon
     - 

     - parameter body: (body)  
     - parameter contentType: (header)  
     - parameter authorization: (header)  

     - returns: RequestBuilder<Void> 
     */
    open class func verifyCouponWithRequestBuilder(body: String, contentType: String, authorization: String) -> RequestBuilder<Void> {
        let path = "/cholaottservice/api/v1/validatemoviecoupon"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Content-Type": contentType,
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }
}
