//
// ReviewsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class ReviewsAPI {
    /**
     Create Review

     - parameter body: (body)  
     - parameter contentType: (header)  
     - parameter authorization: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createReview(body: String, contentType: String, authorization: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        createReviewWithRequestBuilder(body: body, contentType: contentType, authorization: authorization).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Create Review
     - POST /cholaottservice/api/v1/movie/37/moviereviews
     - 

     - parameter body: (body)  
     - parameter contentType: (header)  
     - parameter authorization: (header)  

     - returns: RequestBuilder<Void> 
     */
    open class func createReviewWithRequestBuilder(body: String, contentType: String, authorization: String) -> RequestBuilder<Void> {
        let path = "/cholaottservice/api/v1/movie/37/moviereviews"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Content-Type": contentType,
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }
    /**
     Delete Review

     - parameter contentType: (header)  
     - parameter authorization: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteReview(contentType: String, authorization: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteReviewWithRequestBuilder(contentType: contentType, authorization: authorization).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete Review
     - DELETE /cholaottservice/api/v1/movie/1/moviereviews/22
     - 

     - parameter contentType: (header)  
     - parameter authorization: (header)  

     - returns: RequestBuilder<Void> 
     */
    open class func deleteReviewWithRequestBuilder(contentType: String, authorization: String) -> RequestBuilder<Void> {
        let path = "/cholaottservice/api/v1/movie/1/moviereviews/22"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Content-Type": contentType,
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     Get One Movie Review

     - parameter contentType: (header)  
     - parameter authorization: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOneMovieReview(contentType: String, authorization: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getOneMovieReviewWithRequestBuilder(contentType: contentType, authorization: authorization).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Get One Movie Review
     - GET /cholaottservice/api/v1/moviereviews/id/1
     - 

     - parameter contentType: (header)  
     - parameter authorization: (header)  

     - returns: RequestBuilder<Void> 
     */
    open class func getOneMovieReviewWithRequestBuilder(contentType: String, authorization: String) -> RequestBuilder<Void> {
        let path = "/cholaottservice/api/v1/moviereviews/id/1"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Content-Type": contentType,
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     Review by Movie Copy

     - parameter page: (query)  
     - parameter size: (query)  
     - parameter sort: (query)  
     - parameter contentType: (header)  
     - parameter authorization: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reviewbyMovieCopy(page: Decimal, size: Decimal, sort: String, contentType: String, authorization: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reviewbyMovieCopyWithRequestBuilder(page: page, size: size, sort: sort, contentType: contentType, authorization: authorization).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Review by Movie Copy
     - GET /cholaottservice/api/v1/moviereviewsbymovie/28
     - 

     - parameter page: (query)  
     - parameter size: (query)  
     - parameter sort: (query)  
     - parameter contentType: (header)  
     - parameter authorization: (header)  

     - returns: RequestBuilder<Void> 
     */
    open class func reviewbyMovieCopyWithRequestBuilder(page: Decimal, size: Decimal, sort: String, contentType: String, authorization: String) -> RequestBuilder<Void> {
        let path = "/cholaottservice/api/v1/moviereviewsbymovie/28"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "page": page, 
                        "size": size, 
                        "sort": sort
        ])
        let nillableHeaders: [String: Any?] = [
                        "Content-Type": contentType,
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     Review by Movie Public

     - parameter page: (query)  
     - parameter size: (query)  
     - parameter sort: (query)  
     - parameter contentType: (header)  
     - parameter authorization: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reviewbyMoviePublic(page: Decimal, size: Decimal, sort: String, contentType: String, authorization: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reviewbyMoviePublicWithRequestBuilder(page: page, size: size, sort: sort, contentType: contentType, authorization: authorization).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Review by Movie Public
     - GET /cholaottservice/api/v1/public/moviereviewsbymovie/28
     - 

     - parameter page: (query)  
     - parameter size: (query)  
     - parameter sort: (query)  
     - parameter contentType: (header)  
     - parameter authorization: (header)  

     - returns: RequestBuilder<Void> 
     */
    open class func reviewbyMoviePublicWithRequestBuilder(page: Decimal, size: Decimal, sort: String, contentType: String, authorization: String) -> RequestBuilder<Void> {
        let path = "/cholaottservice/api/v1/public/moviereviewsbymovie/28"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "page": page, 
                        "size": size, 
                        "sort": sort
        ])
        let nillableHeaders: [String: Any?] = [
                        "Content-Type": contentType,
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     Update Review

     - parameter body: (body)  
     - parameter contentType: (header)  
     - parameter authorization: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateReview(body: String, contentType: String, authorization: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateReviewWithRequestBuilder(body: body, contentType: contentType, authorization: authorization).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update Review
     - PUT /cholaottservice/api/v1/moviereviews/1 
     - 

     - parameter body: (body)  
     - parameter contentType: (header)  
     - parameter authorization: (header)  

     - returns: RequestBuilder<Void> 
     */
    open class func updateReviewWithRequestBuilder(body: String, contentType: String, authorization: String) -> RequestBuilder<Void> {
        let path = "/cholaottservice/api/v1/moviereviews/1 "
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Content-Type": contentType,
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }
}
