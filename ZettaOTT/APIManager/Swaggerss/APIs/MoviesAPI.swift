//
// MoviesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class MoviesAPI {
    /**
     Create Movie

     - parameter body: (body)  
     - parameter contentType: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createMovie(body: String, contentType: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        createMovieWithRequestBuilder(body: body, contentType: contentType).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Create Movie
     - POST /cholaottservice/api/v1/movies
     - 

     - parameter body: (body)  
     - parameter contentType: (header)  

     - returns: RequestBuilder<Void> 
     */
    open class func createMovieWithRequestBuilder(body: String, contentType: String) -> RequestBuilder<Void> {
        let path = "/cholaottservice/api/v1/movies"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Content-Type": contentType
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }
    /**
     Get All Movies

     - parameter page: (query)  
     - parameter size: (query)  
     - parameter sort: (query)  
     - parameter contentType: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAllMovies(page: Decimal, size: Decimal, sort: String, contentType: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getAllMoviesWithRequestBuilder(page: page, size: size, sort: sort, contentType: contentType).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Get All Movies
     - GET /cholaottservice/api/v1/getallmovies
     - 

     - parameter page: (query)  
     - parameter size: (query)  
     - parameter sort: (query)  
     - parameter contentType: (header)  

     - returns: RequestBuilder<Void> 
     */
    open class func getAllMoviesWithRequestBuilder(page: Decimal, size: Decimal, sort: String, contentType: String) -> RequestBuilder<Void> {
        let path = "/cholaottservice/api/v1/getallmovies"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "page": page, 
                        "size": size, 
                        "sort": sort
        ])
        let nillableHeaders: [String: Any?] = [
                        "Content-Type": contentType
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     Get All Movies Public

     - parameter contentType: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAllMoviesPublic(contentType: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getAllMoviesPublicWithRequestBuilder(contentType: contentType).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Get All Movies Public
     - GET /cholaottservice/api/v1/public/getallmovies
     - 

     - parameter contentType: (header)  

     - returns: RequestBuilder<Void> 
     */
    open class func getAllMoviesPublicWithRequestBuilder(contentType: String) -> RequestBuilder<Void> {
        let path = "/cholaottservice/api/v1/public/getallmovies"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Content-Type": contentType
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     Get Movie

     - parameter contentType: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMovie(contentType: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getMovieWithRequestBuilder(contentType: contentType).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Get Movie
     - GET /cholaottservice/api/v1/movies/127
     - 

     - parameter contentType: (header)  

     - returns: RequestBuilder<Void> 
     */
    open class func getMovieWithRequestBuilder(contentType: String) -> RequestBuilder<Void> {
        let path = "/cholaottservice/api/v1/movies/127"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Content-Type": contentType
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     Get Movie By Key

     - parameter movie: (query)  
     - parameter contentType: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMovieByKey(movie: String, contentType: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getMovieByKeyWithRequestBuilder(movie: movie, contentType: contentType).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Get Movie By Key
     - GET /cholaottservice/api/v1/moviesbykey
     - 

     - parameter movie: (query)  
     - parameter contentType: (header)  

     - returns: RequestBuilder<Void> 
     */
    open class func getMovieByKeyWithRequestBuilder(movie: String, contentType: String) -> RequestBuilder<Void> {
        let path = "/cholaottservice/api/v1/moviesbykey"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "movie": movie
        ])
        let nillableHeaders: [String: Any?] = [
                        "Content-Type": contentType
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     Get Movie Copy

     - parameter contentType: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMovieCopy(contentType: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getMovieCopyWithRequestBuilder(contentType: contentType).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Get Movie Copy
     - GET /get_hls_key
     - 

     - parameter contentType: (header)  

     - returns: RequestBuilder<Void> 
     */
    open class func getMovieCopyWithRequestBuilder(contentType: String) -> RequestBuilder<Void> {
        let path = "/get_hls_key"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Content-Type": contentType
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     Get Movie Copy

     - parameter movieId: (query)  
     - parameter contentType: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMovieCopy16(movieId: Decimal, contentType: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getMovieCopy16WithRequestBuilder(movieId: movieId, contentType: contentType).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Get Movie Copy
     - GET /cholaottservice/api/v1/playmovie
     - 

     - parameter movieId: (query)  
     - parameter contentType: (header)  

     - returns: RequestBuilder<Void> 
     */
    open class func getMovieCopy16WithRequestBuilder(movieId: Decimal, contentType: String) -> RequestBuilder<Void> {
        let path = "/cholaottservice/api/v1/playmovie"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "movieId": movieId
        ])
        let nillableHeaders: [String: Any?] = [
                        "Content-Type": contentType
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     Get Movie Public

     - parameter movie: (query)  
     - parameter contentType: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMoviePublic(movie: String, contentType: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getMoviePublicWithRequestBuilder(movie: movie, contentType: contentType).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Get Movie Public
     - GET /cholaottservice/api/v1/public/movies
     - 

     - parameter movie: (query)  
     - parameter contentType: (header)  

     - returns: RequestBuilder<Void> 
     */
    open class func getMoviePublicWithRequestBuilder(movie: String, contentType: String) -> RequestBuilder<Void> {
        let path = "/cholaottservice/api/v1/public/movies"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "movie": movie
        ])
        let nillableHeaders: [String: Any?] = [
                        "Content-Type": contentType
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     Get Watchlist

     - parameter page: (query)  
     - parameter size: (query)  
     - parameter contentType: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWatchlist(page: Decimal, size: Decimal, contentType: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getWatchlistWithRequestBuilder(page: page, size: size, contentType: contentType).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Get Watchlist
     - GET /cholaottservice/api/v1/getwatchlist
     - 

     - parameter page: (query)  
     - parameter size: (query)  
     - parameter contentType: (header)  

     - returns: RequestBuilder<Void> 
     */
    open class func getWatchlistWithRequestBuilder(page: Decimal, size: Decimal, contentType: String) -> RequestBuilder<Void> {
        let path = "/cholaottservice/api/v1/getwatchlist"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "page": page, 
                        "size": size
        ])
        let nillableHeaders: [String: Any?] = [
                        "Content-Type": contentType
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     Search Movies Copy

     - parameter search: (query)  
     - parameter page: (query)  
     - parameter size: (query)  
     - parameter contentType: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func searchMoviesCopy(search: String, page: Decimal, size: Decimal, contentType: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        searchMoviesCopyWithRequestBuilder(search: search, page: page, size: size, contentType: contentType).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Search Movies Copy
     - GET /cholaottservice/api/v1/public/searchmovies
     - 

     - parameter search: (query)  
     - parameter page: (query)  
     - parameter size: (query)  
     - parameter contentType: (header)  

     - returns: RequestBuilder<Void> 
     */
    open class func searchMoviesCopyWithRequestBuilder(search: String, page: Decimal, size: Decimal, contentType: String) -> RequestBuilder<Void> {
        let path = "/cholaottservice/api/v1/public/searchmovies"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "search": search, 
                        "page": page, 
                        "size": size
        ])
        let nillableHeaders: [String: Any?] = [
                        "Content-Type": contentType
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     Streaming Now

     - parameter showinios: (query)  
     - parameter page: (query)  
     - parameter size: (query)  
     - parameter sort: (query)  
     - parameter contentType: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func streamingNow(showinios: String, page: Decimal, size: Decimal, sort: String, contentType: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        streamingNowWithRequestBuilder(showinios: showinios, page: page, size: size, sort: sort, contentType: contentType).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Streaming Now
     - GET /cholaottservice/api/v1/streamingnow
     - 

     - parameter showinios: (query)  
     - parameter page: (query)  
     - parameter size: (query)  
     - parameter sort: (query)  
     - parameter contentType: (header)  

     - returns: RequestBuilder<Void> 
     */
    open class func streamingNowWithRequestBuilder(showinios: String, page: Decimal, size: Decimal, sort: String, contentType: String) -> RequestBuilder<Void> {
        let path = "/cholaottservice/api/v1/streamingnow"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "showinios": showinios, 
                        "page": page, 
                        "size": size, 
                        "sort": sort
        ])
        let nillableHeaders: [String: Any?] = [
                        "Content-Type": contentType
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     Streaming Now Public

     - parameter page: (query)  
     - parameter size: (query)  
     - parameter sortBy: (query)  
     - parameter contentType: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func streamingNowPublic(page: Decimal, size: Decimal, sortBy: String, contentType: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        streamingNowPublicWithRequestBuilder(page: page, size: size, sortBy: sortBy, contentType: contentType).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Streaming Now Public
     - GET /cholaottservice/api/v1/public/streamingnow
     - 

     - parameter page: (query)  
     - parameter size: (query)  
     - parameter sortBy: (query)  
     - parameter contentType: (header)  

     - returns: RequestBuilder<Void> 
     */
    open class func streamingNowPublicWithRequestBuilder(page: Decimal, size: Decimal, sortBy: String, contentType: String) -> RequestBuilder<Void> {
        let path = "/cholaottservice/api/v1/public/streamingnow"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "page": page, 
                        "size": size, 
                        "sortBy": sortBy
        ])
        let nillableHeaders: [String: Any?] = [
                        "Content-Type": contentType
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     Toggle Movie Active

     - parameter body: (body)  
     - parameter contentType: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func toggleMovieActive(body: String, contentType: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        toggleMovieActiveWithRequestBuilder(body: body, contentType: contentType).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Toggle Movie Active
     - PUT /cholaottservice/api/v1/movies/124/toggleActive
     - 

     - parameter body: (body)  
     - parameter contentType: (header)  

     - returns: RequestBuilder<Void> 
     */
    open class func toggleMovieActiveWithRequestBuilder(body: String, contentType: String) -> RequestBuilder<Void> {
        let path = "/cholaottservice/api/v1/movies/124/toggleActive"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Content-Type": contentType
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }
    /**
     Toggle Movie Featured

     - parameter body: (body)  
     - parameter contentType: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func toggleMovieFeatured(body: String, contentType: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        toggleMovieFeaturedWithRequestBuilder(body: body, contentType: contentType).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Toggle Movie Featured
     - PUT /cholaottservice/api/v1/movies/124/toggleFeatured
     - 

     - parameter body: (body)  
     - parameter contentType: (header)  

     - returns: RequestBuilder<Void> 
     */
    open class func toggleMovieFeaturedWithRequestBuilder(body: String, contentType: String) -> RequestBuilder<Void> {
        let path = "/cholaottservice/api/v1/movies/124/toggleFeatured"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Content-Type": contentType
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }
    /**
     Top Movies For You

     - parameter search: (query)  
     - parameter page: (query)  
     - parameter size: (query)  
     - parameter contentType: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func topMoviesForYou(search: String, page: Decimal, size: Decimal, contentType: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        topMoviesForYouWithRequestBuilder(search: search, page: page, size: size, contentType: contentType).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Top Movies For You
     - GET /cholaottservice/api/v1/searchmovies
     - 

     - parameter search: (query)  
     - parameter page: (query)  
     - parameter size: (query)  
     - parameter contentType: (header)  

     - returns: RequestBuilder<Void> 
     */
    open class func topMoviesForYouWithRequestBuilder(search: String, page: Decimal, size: Decimal, contentType: String) -> RequestBuilder<Void> {
        let path = "/cholaottservice/api/v1/searchmovies"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "search": search, 
                        "page": page, 
                        "size": size
        ])
        let nillableHeaders: [String: Any?] = [
                        "Content-Type": contentType
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     Upcoming Movies

     - parameter page: (query)  
     - parameter size: (query)  
     - parameter showinios: (query)  
     - parameter contentType: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func upcomingMovies(page: Decimal, size: Decimal, showinios: String, contentType: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        upcomingMoviesWithRequestBuilder(page: page, size: size, showinios: showinios, contentType: contentType).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Upcoming Movies
     - GET /cholaottservice/api/v1/upcomingmovies
     - 

     - parameter page: (query)  
     - parameter size: (query)  
     - parameter showinios: (query)  
     - parameter contentType: (header)  

     - returns: RequestBuilder<Void> 
     */
    open class func upcomingMoviesWithRequestBuilder(page: Decimal, size: Decimal, showinios: String, contentType: String) -> RequestBuilder<Void> {
        let path = "/cholaottservice/api/v1/upcomingmovies"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "page": page, 
                        "size": size, 
                        "showinios": showinios
        ])
        let nillableHeaders: [String: Any?] = [
                        "Content-Type": contentType
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     Upcoming Movies Public

     - parameter page: (query)  
     - parameter size: (query)  
     - parameter sortBy: (query)  
     - parameter contentType: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func upcomingMoviesPublic(page: Decimal, size: Decimal, sortBy: String, contentType: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        upcomingMoviesPublicWithRequestBuilder(page: page, size: size, sortBy: sortBy, contentType: contentType).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Upcoming Movies Public
     - GET /cholaottservice/api/v1/public/upcomingmovies
     - 

     - parameter page: (query)  
     - parameter size: (query)  
     - parameter sortBy: (query)  
     - parameter contentType: (header)  

     - returns: RequestBuilder<Void> 
     */
    open class func upcomingMoviesPublicWithRequestBuilder(page: Decimal, size: Decimal, sortBy: String, contentType: String) -> RequestBuilder<Void> {
        let path = "/cholaottservice/api/v1/public/upcomingmovies"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "page": page, 
                        "size": size, 
                        "sortBy": sortBy
        ])
        let nillableHeaders: [String: Any?] = [
                        "Content-Type": contentType
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     Update Movie

     - parameter body: (body)  
     - parameter contentType: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateMovie(body: String, contentType: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateMovieWithRequestBuilder(body: body, contentType: contentType).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update Movie
     - PUT /cholaottservice/api/v1/movies/107
     - 

     - parameter body: (body)  
     - parameter contentType: (header)  

     - returns: RequestBuilder<Void> 
     */
    open class func updateMovieWithRequestBuilder(body: String, contentType: String) -> RequestBuilder<Void> {
        let path = "/cholaottservice/api/v1/movies/107"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Content-Type": contentType
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }
    /**
     Upload Movie Image

     - parameter file: (form)  
     - parameter contentType: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func uploadMovieImage(file: Data, contentType: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        uploadMovieImageWithRequestBuilder(file: file, contentType: contentType).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Upload Movie Image
     - POST /cholaottservice/api/v1/uploadmovieimage/1
     - 

     - parameter file: (form)  
     - parameter contentType: (header)  

     - returns: RequestBuilder<Void> 
     */
    open class func uploadMovieImageWithRequestBuilder(file: Data, contentType: String) -> RequestBuilder<Void> {
        let path = "/cholaottservice/api/v1/uploadmovieimage/1"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
                "file": file
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Content-Type": contentType
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     Upload Movie Poster

     - parameter file: (form)  
     - parameter contentType: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func uploadMoviePoster(file: Data, contentType: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        uploadMoviePosterWithRequestBuilder(file: file, contentType: contentType).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Upload Movie Poster
     - POST /cholaottservice/api/v1/uploadmovieposter/1
     - 

     - parameter file: (form)  
     - parameter contentType: (header)  

     - returns: RequestBuilder<Void> 
     */
    open class func uploadMoviePosterWithRequestBuilder(file: Data, contentType: String) -> RequestBuilder<Void> {
        let path = "/cholaottservice/api/v1/uploadmovieposter/1"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
                "file": file
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Content-Type": contentType
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     Upload Movie Teaser

     - parameter file: (form)  
     - parameter contentType: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func uploadMovieTeaser(file: Data, contentType: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        uploadMovieTeaserWithRequestBuilder(file: file, contentType: contentType).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Upload Movie Teaser
     - POST /cholaottservice/api/v1/uploadmovieteaser/1
     - 

     - parameter file: (form)  
     - parameter contentType: (header)  

     - returns: RequestBuilder<Void> 
     */
    open class func uploadMovieTeaserWithRequestBuilder(file: Data, contentType: String) -> RequestBuilder<Void> {
        let path = "/cholaottservice/api/v1/uploadmovieteaser/1"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
                "file": file
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Content-Type": contentType
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     Upload Movie Trailor

     - parameter file: (form)  
     - parameter contentType: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func uploadMovieTrailor(file: Data, contentType: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        uploadMovieTrailorWithRequestBuilder(file: file, contentType: contentType).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Upload Movie Trailor
     - POST /cholaottservice/api/v1/uploadmovietrailor/1
     - 

     - parameter file: (form)  
     - parameter contentType: (header)  

     - returns: RequestBuilder<Void> 
     */
    open class func uploadMovieTrailorWithRequestBuilder(file: Data, contentType: String) -> RequestBuilder<Void> {
        let path = "/cholaottservice/api/v1/uploadmovietrailor/1"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
                "file": file
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Content-Type": contentType
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     Upload Web Movie Detail

     - parameter file: (form)  
     - parameter contentType: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func uploadWebMovieDetail(file: Data, contentType: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        uploadWebMovieDetailWithRequestBuilder(file: file, contentType: contentType).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Upload Web Movie Detail
     - POST /cholaottservice/api/v1/uploadmoviewebdetailimg/1
     - 

     - parameter file: (form)  
     - parameter contentType: (header)  

     - returns: RequestBuilder<Void> 
     */
    open class func uploadWebMovieDetailWithRequestBuilder(file: Data, contentType: String) -> RequestBuilder<Void> {
        let path = "/cholaottservice/api/v1/uploadmoviewebdetailimg/1"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
                "file": file
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Content-Type": contentType
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     Upload Web Movie Poster

     - parameter file: (form)  
     - parameter contentType: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func uploadWebMoviePoster(file: Data, contentType: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        uploadWebMoviePosterWithRequestBuilder(file: file, contentType: contentType).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Upload Web Movie Poster
     - POST /cholaottservice/api/v1/uploadmoviewebposterimg/1
     - 

     - parameter file: (form)  
     - parameter contentType: (header)  

     - returns: RequestBuilder<Void> 
     */
    open class func uploadWebMoviePosterWithRequestBuilder(file: Data, contentType: String) -> RequestBuilder<Void> {
        let path = "/cholaottservice/api/v1/uploadmoviewebposterimg/1"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
                "file": file
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Content-Type": contentType
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     Upload Web Movie Streaming

     - parameter file: (form)  
     - parameter contentType: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func uploadWebMovieStreaming(file: Data, contentType: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        uploadWebMovieStreamingWithRequestBuilder(file: file, contentType: contentType).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Upload Web Movie Streaming
     - POST /cholaottservice/api/v1/uploadmoviewebstreamingimg/1
     - 

     - parameter file: (form)  
     - parameter contentType: (header)  

     - returns: RequestBuilder<Void> 
     */
    open class func uploadWebMovieStreamingWithRequestBuilder(file: Data, contentType: String) -> RequestBuilder<Void> {
        let path = "/cholaottservice/api/v1/uploadmoviewebstreamingimg/1"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
                "file": file
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Content-Type": contentType
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
}
